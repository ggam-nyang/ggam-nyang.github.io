{"componentChunkName":"component---src-templates-blog-template-js","path":"/steady/daily/2023/03/24/","result":{"data":{"cur":{"id":"b669bc86-ec13-5b8e-8db6-438431fbc847","html":"<h2 id=\"-개발\" style=\"position:relative;\"><a href=\"#-%EA%B0%9C%EB%B0%9C\" aria-label=\" 개발 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💻 개발</h2>\n<h3 id=\"kotlin\" style=\"position:relative;\"><a href=\"#kotlin\" aria-label=\"kotlin permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kotlin</h3>\n<p>4장 클래스, 객체, 인터페이스</p>\n<ul>\n<li>interface는 구현된 메서드를 가진다.(default method 처럼)\n<ul>\n<li>default 구현이 둘 이상의 인터페이스가 가지면, override 필수</li>\n</ul>\n</li>\n<li>Kotlin의 class, method는 기본이 final\n<ul>\n<li>상속을 허용하려면 <code class=\"language-text\">open</code> (<code class=\"language-text\">override</code> 메서드는 open이다.)</li>\n<li>이로 인해 스마트 캐스트가 가능하다는 이점이 생긴다.\n<ul>\n<li>프로퍼티가 val + 커스텀 접근자 x 일 때만 스마트 캐스트</li>\n<li>상속 후 프로퍼티의 커스텀 접근자를 정의하면 스마트 캐스트 요구 사항이 깨질 수 있다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">package-private</code>은 없고, 모듈 내부에서만 접근 가능한 <code class=\"language-text\">internal</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">internal</span> <span class=\"token keyword\">open</span> <span class=\"token keyword\">class</span> TalkativeButton<span class=\"token operator\">:</span> Focusable <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">yell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"HEY!\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">whisper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"whisper\"</span></span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> TalkativeButton<span class=\"token punctuation\">.</span><span class=\"token function\">giveSpeech</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// ERROR: internal class이므로 노출할 수 없다. </span>\n    <span class=\"token function\">yell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ERROR: private method</span>\n  \n    <span class=\"token function\">whisper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ERROR: protected method 같은 패키지에서 접근이 불가하다.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>kotlin nested class는 변경자가 없으면 java 내부 static class와 같다.\n<ul>\n<li>바깥 클래스에 대한 참조를 포함하게 하려면 <code class=\"language-text\">inner</code> 변경자를 사용한다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">sealed</code> 클래스 상속을 제한한다.\n<ul>\n<li>하위 클래스는 모두 상위 클래스의 nested class 로 존재해야한다.</li>\n<li><code class=\"language-text\">when</code>에서 else문이 강제되지 않아, 예외로 인한 버그를 예방한다.</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><code class=\"language-text\">sealed</code> 접근자의 제한과 코틀린 1.5에서 개선된 점을 알아보쟈\n<a href=\"https://ggam-nyang.github.io/%EC%97%B4%EC%8B%AC%ED%9E%88%EA%B8%B0%EB%A1%9D/Kotlin-in-Action/sealed\">sealed 접근자</a></p>\n</blockquote>\n<ul>\n<li>주 생성자, 부 생성자, 초기화 블록 등이 있다.\n<ul>\n<li>DI 프레임워크 등에서 parameter 없는 생성자가 필요한 경우가 있는데, 코틀린은 default 값을 통해 해결한다. (안전성과 가독성에 괜찮은걸까?)</li>\n<li>인터페이스는 프로퍼티를 가질 수 있고, 이는 하위 클래스가 확장 시 구현해야한다.</li>\n</ul>\n</li>\n<li>프로퍼티는 값을 저장하는 프로퍼티, 커스텀 접근자에서 매번 계산하는 프로퍼티 두 가지가 있다.\n<ul>\n<li>쉽게 말해 게터를 정의한 경우와, 값이 대입된 프로퍼티 두 가지이다.\n<ul>\n<li>setter에서 <code class=\"language-text\">field</code>로 필드 값을 가져올 수 있다.</li>\n<li><code class=\"language-text\">private get</code>, <code class=\"language-text\">private set</code>으로 접근자의 가시성 변경 가능하다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">by</code> 키워드로 위임을 할 수 있다.\n<ul>\n<li>코틀린은 상속에서 발생하는 문제를 위해 기본이 <code class=\"language-text\">final</code>이다.</li>\n</ul>\n<br> 상속 불가인 클래스에 대해 데코레이터 패턴을 이용해 하위 타입처럼 생성할 수 있다.\n<ul>\n<li>데코레이터 패턴의 구현의 복잡성을 지원해주는 것이 바로 <code class=\"language-text\">by</code></li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> DelegatingCollection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">:</span> Collection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> innerList <span class=\"token operator\">=</span> arrayListOf<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">val</span> size<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> innerList<span class=\"token punctuation\">.</span>size\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Boolean <span class=\"token operator\">=</span> innerList<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> DelegatingCollection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n    innerList<span class=\"token operator\">:</span> Collection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">=</span> ArrayList<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Collection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token keyword\">by</span> innerList <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>위의 과정이 아래와 같이 단순해진다.</li>\n<li>object 선언은 싱글턴 패턴을 지원한다.</li>\n<li>코틀린은 <code class=\"language-text\">static</code> 이 없지만, <code class=\"language-text\">패키지 수준의 최상위 함수 + object</code>가 있다.</li>\n<li><code class=\"language-text\">Companion Object</code> 내부에 private 생성자, 정적 멤버를 생성하기 좋다\n<ul>\n<li><code class=\"language-text\">Companion Object</code>는 바깥 클래스의 private 멤버에 접근이 가능하기 때문이다.</li>\n<li>여기에 팩토리 패턴을 구현하자.</li>\n<li>자바에서 사용하기 위해 static으로 만들고 싶다면 <code class=\"language-text\">@JvmStatic</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"spring\" style=\"position:relative;\"><a href=\"#spring\" aria-label=\"spring permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring</h3>\n<p>MVC 1 강의를 끝냈고, 2도 달리자!\n(아는 부분은 빠르게 넘어가되, 천천히 하자)</p>\n<p>Numble을 통해 프로젝트 진행하며 공부하자! (강의만 듣기 노노)</p>\n<h2 id=\"-오늘\" style=\"position:relative;\"><a href=\"#-%EC%98%A4%EB%8A%98\" aria-label=\" 오늘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌙 오늘</h2>\n<ul>\n<li>Good\n<ul>\n<li>안과 치료 클리어!</li>\n<li>Spring 강의 마무리</li>\n<li>Numble 프로젝트 시작</li>\n</ul>\n</li>\n</ul>\n<br>\n- Be Better\n  - 아침에 어제 계획 확인하기\n  - 독서 시간 빼기\n<h2 id=\"️-내일\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EB%82%B4%EC%9D%BC\" aria-label=\"️ 내일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>☀️ 내일</h2>\n<ul>\n<li>Kotlin\n<ul>\n<li>5장 읽기</li>\n</ul>\n</li>\n<li>Spring\n<ul>\n<li>강의 1강</li>\n<li>Numble 프로젝트 개시</li>\n</ul>\n</li>\n<li>정형외과</li>\n<li>Algorithm</li>\n<li>🔥 독서</li>\n</ul>\n<p>ps. 개발 관련 내용은 따로 남기는 것이 좋을듯!</p>","excerpt":"💻 개발 Kotlin 4장 클래스, 객체, 인터페이스 interface는 구현된 메서드를 가진다.(default method 처럼) default 구현이 둘 이상의 인터페이스가 가지면, override 필수 Kotlin의 class, method는 기본이 final 상속을 허용하려면  ( 메서드는 open이다.) 이로 인해 스마트 캐스트가 가능하다는 이점이 생긴다. 프로퍼티가 val + 커스텀 접근자 x 일 때만 스마트 캐스트 상속 후 프로퍼티의 커스텀 접근자를 정의하면 스마트 캐스트 요구 사항이 깨질 수 있다. 은 없고, 모듈 내부에서만 접근 가능한  kotlin nested class는 변경자가 없으면 java 내부 static class와 같다. 바깥 클래스에 대한 참조를 포함하게 하려면  변경자를 사용한다.  클래스 상속을 제한한다. 하위 클래스는 모두 상위 클래스의 nested class 로 존재해야한다. 에서 else문이 강제되지 않아, 예외로 인한 버그를 예방한다.  …","frontmatter":{"date":"March 24, 2023","title":"2023.03.24(Fri)","categories":"데일리","author":"지구깜냥","emoji":"🌱"},"fields":{"slug":"/steady/daily/2023/03/24/"}},"next":{"id":"c4c4952b-eac3-5468-820b-68647b0b512c","html":"<p>중복되는 내용이지만 Kotlin in Action 1,2,3,4장 정리를 모아놓았습니다.</p>\n<h3 id=\"kotlin\" style=\"position:relative;\"><a href=\"#kotlin\" aria-label=\"kotlin permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kotlin</h3>\n<p>1장</p>\n<ul>\n<li>코틀린의 빌더 패턴이란, 디자인 패턴 빌더 패턴과 같다. (p.44)\n<br></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token function\">JuiceBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">water</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">ice</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">orange</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">banana</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이처럼 Builder를 만들어 사용하는데, 파라미터가 명시적이고 필수 파라미터를 확인할 수 있다.\n외에도 여러 이점이 있어 Lombok에서도 지원하는 패턴인데\n코틀린의 경우,</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token function\">Juice</span><span class=\"token punctuation\">(</span>\n    water <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n    ice <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n    oranger <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n    banana <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>생성자에 변수 명을 명시할 수 있고, 매개변수별로 기본값을 가질 수 있다.\n때문에 이 자체로 빌더 패턴이 구현되어 있어 이를 용이하게 사용하면 좋다.</p>\n<ul>\n<li>1장은 코틀린의 주요 특성인 다양한 플랫폼, 정적 타입 언어, 함수형 + 객체 지향, 무료 오픈소스 대해 말한다.</li>\n<li>코틀린의 철학\n<ul>\n<li>실용성</li>\n<li>간결성</li>\n<li>안전성</li>\n<li>상호운용성</li>\n</ul>\n</li>\n</ul>\n<p>2장</p>\n<ul>\n<li>대입문은 자바에서 식, 코틀린에서는 문이다.\n<ul>\n<li>코틀린에서는 <code class=\"language-text\">a = b = c</code>와 같이 사용할 수 없다.</li>\n</ul>\n</li>\n<li>모든 변수를 val 선언, 변경이 불가피할때만 var 이용하자.</li>\n<li>자바의 문자열 접합 연산은 내부적으로 <code class=\"language-text\">StringBuilder</code>를 사용해 효율적이다.\n<ul>\n<li>코틀린의 문자열 템플릿 또한 마찬가지로 효율적.</li>\n</ul>\n</li>\n<li>프로퍼티를 기본으로 지원하여, Class의 필드에 대해 게터 세터가 생성된다.</li>\n<li>변수 타입은 is로 검사하고, 이후엔 스마트 캐스트를 통해 캐스팅하지 않아도 검사된 타입으로 취급한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sth <span class=\"token keyword\">is</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">val</span> newSth <span class=\"token operator\">=</span> sth <span class=\"token keyword\">as</span> Int <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 불필요</span>\n<span class=\"token comment\">// 캐스팅하지 않아도 if 안에선 sth은 Int로 스마트 캐스팅 되어있다.</span></code></pre></div>\n<ul>\n<li>Exception 또한 식이다. 자바와 사용은 같으나 throws 절이 없다.\n<ul>\n<li>자바는 checked Exception 에 대해 명시적 처리를 하지만 코틀린은 checked, unchecked를 구분하지 않는다.</li>\n</ul>\n</li>\n</ul>\n<p>3장 함수 정의와 호출</p>\n<ul>\n<li>프로퍼티도 최상위 수준에 놓을 수 있다. (함수도)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">package</span> blog\n\n<span class=\"token keyword\">val</span> aString<span class=\"token operator\">:</span> String\n<span class=\"token keyword\">var</span> aInt<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> THE_INT <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"HI test\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>const를 붙이면 pubilc static final 이 된다.</li>\n<li><code class=\"language-text\">fun String.lastChar(): Char</code> 처럼 확장할 클래스의 이름(수신 객체 타입)을 명시하고 확장 함수를 정의할 수 있다.</li>\n<li>확장함수가 캡슐화를 깨지는 않는다. 내부적으로 수신 객체를 첫 번째 인자로 받는 정적 메서드이다.\n<ul>\n<li>당연히 확장 함수 내부에서 private, protected 멤버는 접근이 불가하다.</li>\n<li>확장 함수는 단지 정적 메서드 호출에 대한 문법적인 편의(<em>syntatic sugar</em>)</li>\n</ul>\n</li>\n<li>Java <code class=\"language-text\">...</code> == Kotlin <code class=\"language-text\">vararg</code> (가변 길이 인자)\n<ul>\n<li><code class=\"language-text\">*aList</code>는 배열을 명시적으로 풀어준다.</li>\n</ul>\n</li>\n<li>중위 호출은 <code class=\"language-text\">infix</code> 변경자를 함수 앞에 붙여주어 구현한다.\n<ul>\n<li>ex) <code class=\"language-text\">infix fun Any.to(other: Any) = Pair(this, other)</code></li>\n</ul>\n</li>\n</ul>\n<p>4장 클래스, 객체, 인터페이스</p>\n<ul>\n<li>interface는 구현된 메서드를 가진다.(default method 처럼)\n<ul>\n<li>default 구현이 둘 이상의 인터페이스가 가지면, override 필수</li>\n</ul>\n</li>\n<li>Kotlin의 class, method는 기본이 final\n<ul>\n<li>상속을 허용하려면 <code class=\"language-text\">open</code> (<code class=\"language-text\">override</code> 메서드는 open이다.)</li>\n<li>이로 인해 스마트 캐스트가 가능하다는 이점이 생긴다.\n<ul>\n<li>프로퍼티가 val + 커스텀 접근자 x 일 때만 스마트 캐스트</li>\n<li>상속 후 프로퍼티의 커스텀 접근자를 정의하면 스마트 캐스트 요구 사항이 깨질 수 있다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">package-private</code>은 없고, 모듈 내부에서만 접근 가능한 <code class=\"language-text\">internal</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">internal</span> <span class=\"token keyword\">open</span> <span class=\"token keyword\">class</span> TalkativeButton<span class=\"token operator\">:</span> Focusable <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">yell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"HEY!\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">whisper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"whisper\"</span></span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> TalkativeButton<span class=\"token punctuation\">.</span><span class=\"token function\">giveSpeech</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// ERROR: internal class이므로 노출할 수 없다. </span>\n    <span class=\"token function\">yell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ERROR: private method</span>\n  \n    <span class=\"token function\">whisper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ERROR: protected method 같은 패키지에서 접근이 불가하다.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>kotlin nested class는 변경자가 없으면 java 내부 static class와 같다.\n<ul>\n<li>바깥 클래스에 대한 참조를 포함하게 하려면 <code class=\"language-text\">inner</code> 변경자를 사용한다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">sealed</code> 클래스 상속을 제한한다.\n<ul>\n<li>하위 클래스는 모두 상위 클래스의 nested class 로 존재해야한다.</li>\n<li><code class=\"language-text\">when</code>에서 else문이 강제되지 않아, 예외로 인한 버그를 예방한다.</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><code class=\"language-text\">sealed</code> 접근자의 제한과 코틀린 1.5에서 개선된 점을 알아보쟈\n<a href=\"https://ggam-nyang.github.io/%EC%97%B4%EC%8B%AC%ED%9E%88%EA%B8%B0%EB%A1%9D/Kotlin-in-Action/sealed\">sealed 접근자</a></p>\n</blockquote>\n<ul>\n<li>주 생성자, 부 생성자, 초기화 블록 등이 있다.\n<ul>\n<li>DI 프레임워크 등에서 parameter 없는 생성자가 필요한 경우가 있는데, 코틀린은 default 값을 통해 해결한다. (안전성과 가독성에 괜찮은걸까?)</li>\n<li>인터페이스는 프로퍼티를 가질 수 있고, 이는 하위 클래스가 확장 시 구현해야한다.</li>\n</ul>\n</li>\n<li>프로퍼티는 값을 저장하는 프로퍼티, 커스텀 접근자에서 매번 계산하는 프로퍼티 두 가지가 있다.\n<ul>\n<li>쉽게 말해 게터를 정의한 경우와, 값이 대입된 프로퍼티 두 가지이다.\n<ul>\n<li>setter에서 <code class=\"language-text\">field</code>로 필드 값을 가져올 수 있다.</li>\n<li><code class=\"language-text\">private get</code>, <code class=\"language-text\">private set</code>으로 접근자의 가시성 변경 가능하다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">by</code> 키워드로 위임을 할 수 있다.\n<ul>\n<li>코틀린은 상속에서 발생하는 문제를 위해 기본이 <code class=\"language-text\">final</code>이다.</li>\n</ul>\n<br> 상속 불가인 클래스에 대해 데코레이터 패턴을 이용해 하위 타입처럼 생성할 수 있다.\n<ul>\n<li>데코레이터 패턴의 구현의 복잡성을 지원해주는 것이 바로 <code class=\"language-text\">by</code></li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> DelegatingCollection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">:</span> Collection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> innerList <span class=\"token operator\">=</span> arrayListOf<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">val</span> size<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> innerList<span class=\"token punctuation\">.</span>size\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Boolean <span class=\"token operator\">=</span> innerList<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> DelegatingCollection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n    innerList<span class=\"token operator\">:</span> Collection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">=</span> ArrayList<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Collection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token keyword\">by</span> innerList <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>위의 과정이 아래와 같이 단순해진다.</li>\n<li>object 선언은 싱글턴 패턴을 지원한다.</li>\n<li>코틀린은 <code class=\"language-text\">static</code> 이 없지만, <code class=\"language-text\">패키지 수준의 최상위 함수 + object</code>가 있다.</li>\n<li><code class=\"language-text\">Companion Object</code> 내부에 private 생성자, 정적 멤버를 생성하기 좋다\n<ul>\n<li><code class=\"language-text\">Companion Object</code>는 바깥 클래스의 private 멤버에 접근이 가능하기 때문이다.</li>\n<li>여기에 팩토리 패턴을 구현하자.</li>\n<li>자바에서 사용하기 위해 static으로 만들고 싶다면 <code class=\"language-text\">@JvmStatic</code></li>\n</ul>\n</li>\n</ul>","frontmatter":{"date":"March 24, 2023","title":"Kotlin-in-Action 1 ~ 4장","categories":"Kotlin","author":"지구깜냥","emoji":"🌱"},"fields":{"slug":"/passion/Kotlin-In-Action/1234/"}},"prev":{"id":"74599883-6278-58d8-bf69-4dcbd085f50b","html":"<h3 id=\"kotlin-in-action\" style=\"position:relative;\"><a href=\"#kotlin-in-action\" aria-label=\"kotlin in action permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kotlin-in-Action</h3>\n<p>5장 람다로 프로그래밍\n람다는 다른 함수에 넘길 수 있는 작은 코드 조각</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> age<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">Person</code> 리스트의 age가 가장 높은 원소를 찾는다면</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">findTheOldest</span><span class=\"token punctuation\">(</span>people<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> maxAge <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">var</span> theOldest<span class=\"token operator\">:</span> Person<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>person <span class=\"token keyword\">in</span> people<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>age <span class=\"token operator\">></span> maxAge<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            maxAge <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span>age\n            theOldest <span class=\"token operator\">=</span> person\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">maxAge, theOldest</code> 두 변수가 필요하다.</p>\n<p>람다를 활용한다면 코드 길이가 줄어든다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">people<span class=\"token punctuation\">.</span><span class=\"token function\">maxBy</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span>age <span class=\"token punctuation\">}</span>\npeople<span class=\"token punctuation\">.</span><span class=\"token function\">maxBy</span><span class=\"token punctuation\">(</span>Person<span class=\"token operator\">::</span>age<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 멤버 참조 이용</span>\npeople<span class=\"token punctuation\">.</span><span class=\"token function\">maxBy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> p<span class=\"token operator\">:</span> Person <span class=\"token operator\">-></span> p<span class=\"token punctuation\">.</span>age <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 코틀린의 지원 없는 정석적인 표현</span></code></pre></div>\n<p>마지막 줄을 개선해보자. <br>\n함수의 마지막 인자가 람다 식이라면 중괄호로 뺄 수 있다. <br>\n<code class=\"language-text\">people.maxBy() { p:Person -> p.age }</code></p>\n<p>람다가 유일한 인자고 괄호로 뺐다면 빈 괄호를 없앨 수 있다.\n<code class=\"language-text\">people.maxBy { p:Person -> p.age }</code></p>\n<p>파라미터 타입을 명시하지 않고(컴파일러가 추론) 한개의 파라미터라면 더 코드를 줄인다.\n<br><code class=\"language-text\">people.maxBy { it.age }</code></p>\n<br>\n<p>자바 무명 클래스처럼 람다를 함수 안에서 정의하면 함수의 파라미터뿐 아니라 람다 정의 앞에 선언된 로컬 변수까지 람다에서 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">printMessagesWithPrefix</span><span class=\"token punctuation\">(</span>messages<span class=\"token operator\">:</span> Collection<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> prefix<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    messages<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">prefix</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">it</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>람다 내부에서 변수 접근이 가능하고, 변경도 가능하다.</p>\n<p>이런 변수를 람다가 포획한 변수라고 하는데, 어떤 함수가 로컬 변수를 포획한 람다를 반환 or 변수에 저장한다면 포획된 로컬 변수의 생명주기와 함수의 생명주기가 달라 질 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">tryToCountButtonClicks</span><span class=\"token punctuation\">(</span>button<span class=\"token operator\">:</span> Button<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Int <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> clicks <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    button<span class=\"token punctuation\">.</span><span class=\"token function\">onClick</span> <span class=\"token punctuation\">{</span> clicks<span class=\"token operator\">++</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> clicks\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 함수는 항상 0을 반환한다.<br>\nonclick 핸들러가 <code class=\"language-text\">tryToCOuntButtonClicks</code>가 <code class=\"language-text\">clicks</code>를 반환한 후에 호출되기 때문</p>\n<p>-> 무슨 의미일까?</p>\n<p>멤버 참조는 다음처럼 사용 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> p <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Dmitry\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> personsAgeFunction <span class=\"token operator\">=</span> Person<span class=\"token operator\">::</span>age\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">personsAgeFunction</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 바운드 멤버 참조</span>\n<span class=\"token keyword\">val</span> dmitrysAgeFunction <span class=\"token operator\">=</span> p<span class=\"token operator\">::</span>age\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">dmitrysAgeFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">filter</code>, <code class=\"language-text\">map</code>등의 컬렉션 함수들은 익숙하기 때문에 기록에는 남기지 않겠다!</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// 중간 Collection이 생겨 비효율</span>\npeople<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&lt;=</span> <span class=\"token number\">27</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 효율</span>\npeople<span class=\"token punctuation\">.</span><span class=\"token function\">count</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&lt;=</span> <span class=\"token number\">27</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"sequence\" style=\"position:relative;\"><a href=\"#sequence\" aria-label=\"sequence permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sequence</h4>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// Collection이 2개 만들어진다. map, filter가 반환하므로.</span>\npeople<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>Person<span class=\"token operator\">::</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"A\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Sequence를 이용해 중간 연산 부산물(?)을 없앤다.</span>\npeople<span class=\"token punctuation\">.</span><span class=\"token function\">asSequence</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>Person<span class=\"token operator\">::</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"A\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이는 lazy하게 연산을 수행하기 때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">asSequence</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"map(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">it</span></span><span class=\"token string\">)\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">*</span> it<span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"filter(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">it</span></span><span class=\"token string\">)\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드는 아무것도 출력하지 않는다.\n<code class=\"language-text\">toList()</code> 와 같은 최종연산이 호출될 때 비로소 모든 중간연산이 적용된다.</p>\n<p>출력의 결과는 <code class=\"language-text\">map(1) filter(1) map(2) filter(4) map(3) filter(9) . . .</code> 이다.</p>\n<p>큰 컬렉션에 대해서는 Sequence 변환 연산을 꼭!</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// 이렇게 응용할 수 있다.</span>\n<span class=\"token keyword\">fun</span> File<span class=\"token punctuation\">.</span><span class=\"token function\">isInsideHiddenDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n    <span class=\"token function\">generateSequence</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span>parentFile <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">any</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span>isHidden <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">val</span> file <span class=\"token operator\">=</span> <span class=\"token function\">File</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"/Users/svtk/.HiddenDir/a.txt\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">isInsideHiddenDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token operator\">></span> <span class=\"token boolean\">true</span></code></pre></div>\n<p>SAM 인터페이스 한줄 정리\n: Java에서 익명 객체로 만들던 것을 Kotlin은 람다로 사용 가능 하고,\n컴파일러가 익명 클래스를 생성해준다.  <br>\n또한, 포획된 변수가 없다면 object로 생성하여 1개의 인스턴스만 유지한다.\n추후 <code class=\"language-text\">inline</code>함수에서 확인하자.</p>\n<h3 id=\"수신-객체-지정-람다-with--apply\" style=\"position:relative;\"><a href=\"#%EC%88%98%EC%8B%A0-%EA%B0%9D%EC%B2%B4-%EC%A7%80%EC%A0%95-%EB%9E%8C%EB%8B%A4-with--apply\" aria-label=\"수신 객체 지정 람다 with  apply permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>수신 객체 지정 람다: with &#x26;&#x26; apply</h3>\n<p>with 활용을 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">alphabet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> result <span class=\"token operator\">=</span> <span class=\"token function\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>letter <span class=\"token keyword\">in</span> <span class=\"token char\">'A'</span><span class=\"token operator\">..</span><span class=\"token char\">'Z'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"\\nNow I know the alphabet!\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token operator\">></span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">alphabet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ABCDEFGHIJKLMNOPQRSTUVWXYZ</span>\n<span class=\"token comment\">// Now I know the alphabet!</span></code></pre></div>\n<p><code class=\"language-text\">with</code>을 사용하면 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">alphabet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> stringBuilder <span class=\"token operator\">=</span> <span class=\"token function\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">with</span><span class=\"token punctuation\">(</span>stringBuilder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>letter <span class=\"token keyword\">in</span> <span class=\"token char\">'A'</span><span class=\"token operator\">..</span><span class=\"token char\">'Z'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"\\nNow I know the alphabet!\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token operator\">></span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">alphabet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// this를 모두 없앨 수 있고 코드가 더 단축된다.</span></code></pre></div>\n<p><code class=\"language-text\">with(stringBuilder, {람다})</code>와 같은 함수이다. 함수지만 람다를 밖으로 빼서 특별한 구문처럼 보인다.</p>\n<p>첫번째 인자는 두번째 인자인 람다의 수신 객체가 된다.\n<code class=\"language-text\">with</code>은 마지막 식의 값을 반환한다.</p>\n<p>람다의 결과 대신 수신 색체가 필요한 경우엔 <code class=\"language-text\">apply</code></p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">alphabet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>letter <span class=\"token keyword\">in</span> <span class=\"token char\">'A'</span><span class=\"token operator\">..</span><span class=\"token char\">'Z'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"\\nNow I know the alphabet!\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token operator\">></span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">alphabet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>apply의 결과는 <code class=\"language-text\">StringBuilder</code>이다. 즉, 수신 객체가 전달받은 람다의 수신 객체가 된다.</p>\n<p>이는 객체의 인스턴스를 만들면서 즉시 프로퍼티 중 일부를 초기화 하는 경우 유용하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">createViewWithCustomAttributes</span><span class=\"token punctuation\">(</span>context<span class=\"token operator\">:</span> Context<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n    <span class=\"token function\">TextView</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span> <span class=\"token punctuation\">{</span>\n        text <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"sample Text\"</span></span>\n        textSize <span class=\"token operator\">=</span> <span class=\"token number\">20.0</span>\n        <span class=\"token function\">setPadding</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>처럼 말이다. 람다를 실행하면 초기화된 TextView를 반환한다.</p>\n<p>마지막으로 with과 apply를 응용한 우아한 함수로 마무리하겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">alphabet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> buildString <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>letter <span class=\"token keyword\">in</span> <span class=\"token char\">'A'</span> <span class=\"token operator\">..</span> <span class=\"token char\">'Z'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"\\nNOw I Know the alphabet!\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"date":"March 25, 2023","title":"Kotlin-in-Action 5장","categories":"Kotlin","author":"지구깜냥","emoji":"🌱"},"fields":{"slug":"/passion/Kotlin-In-Action/5장 끄적이기/"}},"site":{"siteMetadata":{"siteUrl":"https://ggam-nyang.github.io","comments":{"utterances":{"repo":"ggam-nyang/ggam-nyang.github.io"}}}}},"pageContext":{"slug":"/steady/daily/2023/03/24/","nextSlug":"/passion/Kotlin-In-Action/1234/","prevSlug":"/passion/Kotlin-In-Action/5장 끄적이기/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}