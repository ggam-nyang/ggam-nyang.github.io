{"componentChunkName":"component---src-templates-blog-template-js","path":"/steady/sideproject/setting-gradle/","result":{"data":{"cur":{"id":"79b9c085-552b-562e-8a91-febcda45dc96","html":"<blockquote>\n<p><strong>모든 것을 궁금해한다!</strong></p>\n</blockquote>\n<h2 id=\"프로젝트-세팅\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%84%B8%ED%8C%85\" aria-label=\"프로젝트 세팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트 세팅</h2>\n<p>프로젝트를 새로 시작할 때 <a href=\"https://start.spring.io/\">https://start.spring.io/</a> 를 애용한다.\n의존성 추가가 간편하고 Spring 버전 업데이트에 따라 최신화 돼서 좋다.</p>\n<h3 id=\"gradle-vs-maven-\" style=\"position:relative;\"><a href=\"#gradle-vs-maven-\" aria-label=\"gradle vs maven  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gradle vs Maven ?</h3>\n<p>항상 Gradle만을 선택해 왔는데, 둘은 어떤 차이가 있을까?\n(참조: <a href=\"https://www.geeksforgeeks.org/difference-between-gradle-and-maven/\">https://www.geeksforgeeks.org/difference-between-gradle-and-maven/</a>)</p>\n<p>Gradle, Maven은 소프트웨어 빌드에 사용되는 툴이다.</p>\n<h4 id=\"maven\" style=\"position:relative;\"><a href=\"#maven\" aria-label=\"maven permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Maven</h4>\n<p>오픈 소스 프로젝트로 정해진 lifecycle로 다양한 소프트웨어를 관리하는 툴이다.\n이는 짧은 기간안에 표준 레이아웃에서 표준화된 개발에 중점을 둔다.</p>\n<p>XML을 이용하고 Java project를 다른 언어로도 사용할 수 있도록 해준다.</p>\n<p>장점</p>\n<ul>\n<li>빌드를 단순화하고 잘 구축한다.</li>\n<li>다양한 의존성을 자동으로 관리해준다. Jar 파일들을 다운한다.</li>\n<li>POM 파일에서 의존성을 관리하고 추가하기 편하다.</li>\n<li>필수 정보에 접근이 쉽다. (POM에 정의하기 때문일까?)</li>\n<li>확장 가능하고, 스크립트 언어 or Java로 플러그인 작성이 가능하다.</li>\n</ul>\n<p>단점</p>\n<ul>\n<li>설치가 필수다.</li>\n<li>기존 의존성에 대한 Maven 코드가 없으면 Maven을 사용하여 구현할 수 없다.</li>\n<li>실행면에서, 느리다.</li>\n</ul>\n<h4 id=\"gradle\" style=\"position:relative;\"><a href=\"#gradle\" aria-label=\"gradle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gradle</h4>\n<p>오픈소스이며 소프트웨어 빌드를 자동화 해준다.\n생산성이 좋아 널리 사용되고 Java, Groovy DSL로 사용할 수 있다.</p>\n<p>모바일, 웹 어플리케이션의 빌드 + 배포를 도와준다.</p>\n<p>장점</p>\n<ul>\n<li>커스텀 자유도가 매우 높다. (다양하게 활용할 수 있다 프로젝트마다)</li>\n<li>maven의 약 2배 속도로 빠르다.</li>\n<li>플러그인을 만들 수 있고 유연하다.</li>\n<li>다양한 IDE에서 제공된다.</li>\n</ul>\n<p>단점</p>\n<ul>\n<li>충분한 이해도가 필요하다.</li>\n<li>프로젝트에 내장된 형태로 제공되지 않는다. (별도의 파일들이 제공되어야 한다는 뜻인듯?)</li>\n<li>공식 문서가 너무 광범위하다.</li>\n<li>빌드를 도와주는 Ant 빌드 스크립트는 XML이 필요하고, 고도화된 프로젝트에서 자동화 하려면 많은 로직을 XML에 작성해야한다.</li>\n</ul>\n<p><a href=\"https://gradle.org/maven-vs-gradle/\">Gradle 공식 문서</a>도 보면\n<strong>유연성, 성능, 사용성</strong>을 강조한다.</p>\n<p>결과적으로 Gradle이 더 좋다고 느껴진다.<br></p>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\"><span class=\"token list punctuation\">-</span> xml보다 스크립트 작성이 용이\n<span class=\"token list punctuation\">-</span> C/C++ 등에서도 사용 가능한 유연성\n<span class=\"token list punctuation\">-</span> 속도 차이 등 성능</code></pre></div>\n<h3 id=\"gradle-groovy-vs-kotlin-\" style=\"position:relative;\"><a href=\"#gradle-groovy-vs-kotlin-\" aria-label=\"gradle groovy vs kotlin  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gradle Groovy vs Kotlin ?</h3>\n<p>사실 이게 궁금해서 찾아보게 됐다.</p>\n<p><a href=\"https://blog.gradle.org/kotlin-meets-gradle\">https://blog.gradle.org/kotlin-meets-gradle</a> 문서에서 Kotlin DSL을 사용하게 된 이유들이 나와있다.</p>\n<p>요약하면</p>\n<ul>\n<li>자동 완성 및 콘텐츠 지원 (IDE의 지원을 말한다.)</li>\n<li>빠른 문서화 (Gradle 문서화를 말하는건지 모르겠다.)</li>\n<li>소스 탐색</li>\n<li>리팩토링 등</li>\n</ul>\n<p>내가 경험한 큰 장점은 Gradle 파일을 <strong>Kotlin 언어로 작성</strong>할 수 있다는 것과\n<strong>IDE에서 구문 오류를 잘 잡아주는 것</strong>이다.</p>\n<p>이번 프로젝트도 Gradle-Kotlin으로 고고!</p>","excerpt":"모든 것을 궁금해한다! 프로젝트 세팅 프로젝트를 새로 시작할 때 https://start.spring.io/ 를 애용한다.\n의존성 추가가 간편하고 Spring 버전 업데이트에 따라 최신화 돼서 좋다. Gradle vs Maven ? 항상 Gradle만을 선택해 왔는데, 둘은 어떤 차이가 있을까?\n(참조: https://www.geeksforgeeks.org/difference-between-gradle-and-maven/) Gradle, Maven은 소프트웨어 빌드에 사용되는 툴이다. Maven 오픈 소스 프로젝트로 정해진 lifecycle로 다양한 소프트웨어를 관리하는 툴이다.\n이는 짧은 기간안에 표준 레이아웃에서 표준화된 개발에 중점을 둔다. XML을 이용하고 Java project를 다른 언어로도 사용할 수 있도록 해준다. 장점 빌드를 단순화하고 잘 구축한다. 다양한 의존성을 자동으로 관리해준다. Jar 파일들을 다운한다. POM 파일에서 의존성을 관리하고 추가하기 편하다. …","frontmatter":{"date":"April 20, 2023","title":"Gradle kotlin?","categories":"개발","author":"지구깜냥","emoji":"💻"},"fields":{"slug":"/steady/sideproject/setting-gradle/"}},"next":{"id":"a2788ceb-3885-58b0-9b0c-04abbd1a87ba","html":"<h2 id=\"결과물\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EA%B3%BC%EB%AC%BC\" aria-label=\"결과물 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결과물</h2>\n<p>배포 쪽은 처음 공부하다보니, 작업량 산정이 안됐다.</p>\n<p>결과적으로, 50%도.. 완성 못한 느낌으로 제출할 수 밖에 없게 됐다 ㅠ</p>\n<p>호스트님이 의도한 구조는<br></p>\n<ol>\n<li>Terraform으로 클라우드 리소스 생성 및 관리(2개의 ec2 생성)</li>\n<li>Github push 시, Jenkins 서버에서 Checkout -> build -> deploy 과정을 거침</li>\n<li>deploy 단계는 Ansible을 이용해 Web 서버에 배포</li>\n</ol>\n<p>로 이해했다.</p>\n<p>이걸 의도하신게 아닐 수도 있지만..! 내가 이해한 부분은 이렇다.</p>\n<p>나는 Spring server를 배포해보려 했고\n내가 시도한 부분을 위와 대조해 정리해보면</p>\n<ul>\n<li>Terraform -> VPC 기본 세팅과 2개의 ec2 생성</li>\n<li>Jenkins-ec2에 수동으로 Jenkins 설치 및 설정 후 <br></li>\n</ul>\n<p>Github web hook을 통해 build 성공 <br>\n-> 이 과정에서 gradle build 시에는 ec2가 고장이 남.. docker에서 충분히 연습 후에 해야 했는데, 제출날이라 마음이 급했다.</p>\n<ul>\n<li>deploy 단계는 Ansible script를 작성하고 Jenkins pipeline에 추가했지만, build 단계의 오류로 실행은 해보지 못함. <br></li>\n</ul>\n<p>제출 후 다시 천천히 테스트 해보며 구축할 예정!</p>\n<h3 id=\"좋았던-점\" style=\"position:relative;\"><a href=\"#%EC%A2%8B%EC%95%98%EB%8D%98-%EC%A0%90\" aria-label=\"좋았던 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>좋았던 점</h3>\n<p>좋았던 점은 전반적인 인프라 구조를 배웠다.</p>\n<p>착각일 수도 있지만, 남은 과정은 찾아보면서 해결할 수 있을 것 같고..?</p>\n<p>전체적인 인프라 구조를 공부할 수 있었다. 보안을 위한 Key 설정 등을 다루지 못해서 아쉽지만\n못한 부분은 다음주에 해볼 생각이다.</p>\n<p>Terraform, Ansible 등을 깊이 있게 다루지는 못했지만, 배포 자동화를 살짝 엿볼 수 있었다.</p>\n<p>제일 좋았던 점은 docker와 많이 친해졌다.<br>\n이번 딥다이브에서 그나마 친했던게 docker였지만, 제대로 다룰줄 몰랐는데\ndocker 컨테이너를 띄워서 ubuntu 환경에서 테스트를 진행해보며 많이 배울 수 있었다.</p>\n<h3 id=\"아쉬운-점\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%89%AC%EC%9A%B4-%EC%A0%90\" aria-label=\"아쉬운 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아쉬운 점</h3>\n<ol>\n<li>시간 투자를 많이 못했다.<br></li>\n</ol>\n<p>우선순위에 밀리다보니 원하는 만큼 공부하지 못해 아쉽다. 기한은 지났지만 꾸준히 공부해볼 생각이다.</p>\n<ol start=\"2\">\n<li>검색 &#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C; Try <br></li>\n</ol>\n<p>인프라도 결국 docker 환경에서라도 script를 작성해보며 시도하는게 빨리 배운다. <br>\n문서를 찾아보는 것도 좋지만, 실행하고 부딪히는게 이해하기도 좋고 막힌 진도를 뚫는데 큰 도움이 됐다.</p>\n<p>회고록조차 시간에 쫓겨 아쉬움이 많이 남는다..\n제출일 11시 55분이지만!! 같이 신청한 조원들과 마무리까지 달려봐야겠다!!</p>\n<p><code class=\"language-text\">다듬어진 회고록과 공부 기록으로 돌아올 예정!!</code></p>","frontmatter":{"date":"April 09, 2023","title":"Numble 배포 자동화 딥다이브 회고록","categories":"DevOps Numble","author":"지구깜냥","emoji":"🔥"},"fields":{"slug":"/passion/Numble-Deploy/Numble_Deploy_DeepDive/"}},"prev":{"id":"48549a88-0c64-5910-b7b5-07ac5b26b1ef","html":"<blockquote>\n<p><a href=\"https://edu.nextstep.camp\">NextStep - TDD, 클린 코드 with Kotlin</a>강의를 참고했습니다.</p>\n</blockquote>\n<h3 id=\"java-kotlin의-int\" style=\"position:relative;\"><a href=\"#java-kotlin%EC%9D%98-int\" aria-label=\"java kotlin의 int permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Java, Kotlin의 Int</h3>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">    <span class=\"token annotation builtin\">@Test</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> number1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">val</span> number2 <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>number1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>number2<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>number1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isSameAs</span><span class=\"token punctuation\">(</span>number2<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation builtin\">@Test</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> number1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">val</span> number2 <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    \n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>number1 <span class=\"token operator\">==</span> number2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>isTrue\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>number1 <span class=\"token operator\">===</span> number2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>isTrue\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>두 테스트는 모두 참일까?\n당연하게도 그렇다. 코틀린은 타입 추론을 통해, 타입을 명시하지 않아도 number1, number2는 Int가 된다.\n여기서 Int는 코틀린의 Primitive type이고 컴파일 된 바이트 코드를 자바를 역컴파일하면 int가 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">    <span class=\"token annotation builtin\">@Test</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> number1 <span class=\"token operator\">=</span> <span class=\"token number\">1_000</span>\n        <span class=\"token keyword\">val</span> number2 <span class=\"token operator\">=</span> <span class=\"token number\">1_000</span>\n\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>number1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>number2<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>number1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isSameAs</span><span class=\"token punctuation\">(</span>number2<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation builtin\">@Test</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> number1 <span class=\"token operator\">=</span> <span class=\"token number\">1_000</span>\n        <span class=\"token keyword\">val</span> number2 <span class=\"token operator\">=</span> <span class=\"token number\">1_000</span>\n    \n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>number1 <span class=\"token operator\">==</span> number2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>isTrue\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>number1 <span class=\"token operator\">===</span> number2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>isTrue\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 경우를 보자.\n결과는 테스트2만 통과한다. 이유가 뭘까?\n정답은 <code class=\"language-text\">isSameAs</code> 메서드와 자바의 Integer에 있다.</p>\n<p>isSameAs 메서드는 Object로 파라미터를 받는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">SELF</span> <span class=\"token function\">isSameAs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> expected<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    objects<span class=\"token punctuation\">.</span><span class=\"token function\">assertSame</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">,</span> actual<span class=\"token punctuation\">,</span> expected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> myself<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>그래서 Test1을 컴파일 후 자바로 디컴파일 해보면</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> number1 <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">int</span> number2 <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">Assertions</span><span class=\"token punctuation\">.</span><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>number1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>number2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">Assertions</span><span class=\"token punctuation\">.</span><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>number1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isSameAs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>number2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같다. isSameAs에 int를 넘길 순 없기에 원시타입 int의 래퍼 클래스인 Integer로 변환한다.\n때문에 <code class=\"language-text\">number1 == number2</code>지만 <code class=\"language-text\">number1 !== number2</code>이 된다.</p>\n<p>다음 테스트를 보자</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">    <span class=\"token annotation builtin\">@Test</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> number1 <span class=\"token operator\">=</span> Integer<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">val</span> number2 <span class=\"token operator\">=</span> Integer<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>number1 <span class=\"token operator\">==</span> number2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>isTrue\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>number1 <span class=\"token operator\">===</span> number2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>isTrue\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 테스트는 어떨까? 마찬가지로 동등성 비교는 통과하지만, 주소값을 비교하는 동일성 비교는 실패할까?\n정답은 모두 통과한다.</p>\n<p>이유는 Integer 타입에 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token annotation punctuation\">@IntrinsicCandidate</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> <span class=\"token class-name\">IntegerCache</span><span class=\"token punctuation\">.</span>low <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">IntegerCache</span><span class=\"token punctuation\">.</span>high<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">IntegerCache</span><span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token class-name\">IntegerCache</span><span class=\"token punctuation\">.</span>low<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>자바의 <code class=\"language-text\">Integer</code>는 내부에 -127 ~ 128 값을 가지는 Integer 객체를 생성해놓았다.\n때문에 valueOf 메서드를 통해 Integer(1) 객체를 반복생성해도, 같은 객체가 반환되는 것이다.\n자주 사용되는 객체를 반복 생성하지 않고 재활용함으로써 메모리를 효율적으로 사용할 수 있게 된다.</p>\n<p>이런 방식을 <a href=\"https://refactoring.guru/ko/design-patterns/flyweight\">Flyweight 패턴</a>이라 한다.</p>\n<p>이 방식을 적용하면 성능을 높일 수 있다.\n예를 들어</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">Uniform</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> number<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">companion</span> <span class=\"token keyword\">object</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> MIN_NUMBER <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> MAX_NUMBER <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> uniformMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>MIN_NUMBER<span class=\"token operator\">..</span>MAX_NUMBER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">associateWith</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">Uniform</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">fun</span> <span class=\"token function\">of</span><span class=\"token punctuation\">(</span>number<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Uniform <span class=\"token operator\">=</span> uniformMap<span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">]</span> <span class=\"token operator\">?:</span> <span class=\"token function\">Uniform</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>팩토리 메소드를 만들어 관리하면, Uniform 객체는 0~20까지는 같은 인스턴스가 반환이 된다.\nprivate constructor를 사용하는 것도 좋다.</p>\n<p>드디어 코틀린의 value class를 이야기해보자!!\nValue class의 목적은 결국 최적화에 있다.\n<code class=\"language-text\">Uniform</code> 클래스의 경우에도, primitive 타입의 프로퍼티 1개만을 가지는데, 이렇게 래핑할 경우 객체지향 관점에서 이점이 많다.\n그러나 컴파일러 입장에선, primitive 타입이 가지는 빠르고 가벼운 이점이 모두 사라지고 런타임 환경에서 훨씬 성능이 저하된다.\n이를 위해 래핑되어 있지만, 컴파일 단계에서는 그렇지 않도록 해주는 방식이다! 즉 장점만 취한 느낌이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@JvmInline</span>\nvalue <span class=\"token keyword\">class</span> <span class=\"token function\">Uniform</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> number<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">init</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">require</span><span class=\"token punctuation\">(</span>number <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token operator\">..</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation builtin\">@Test</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">test4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> uniform1 <span class=\"token operator\">=</span> <span class=\"token function\">Uniform</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> uniform2 <span class=\"token operator\">=</span> <span class=\"token function\">Uniform</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>uniform1 <span class=\"token operator\">==</span> uniform2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>isTrue\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>uniform1 <span class=\"token operator\">===</span> uniform2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>isTrue <span class=\"token comment\">// value class는 동등성 비교는 불가하다.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 테스트의 결과는 실패로 예상된다. 그러나 통과한다! 팩토리 메서드와 캐싱을 사용하지 않았음에도 말이다.\n자바로 디컴파일해보면</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token annotation punctuation\">@Test</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> uniform1 <span class=\"token operator\">=</span> <span class=\"token class-name\">ValueUniformTest<span class=\"token punctuation\">.</span>Uniform</span><span class=\"token punctuation\">.</span>constructor<span class=\"token operator\">-</span><span class=\"token function\">impl</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">int</span> uniform2 <span class=\"token operator\">=</span> <span class=\"token class-name\">ValueUniformTest<span class=\"token punctuation\">.</span>Uniform</span><span class=\"token punctuation\">.</span>constructor<span class=\"token operator\">-</span><span class=\"token function\">impl</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">Assertions</span><span class=\"token punctuation\">.</span><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ValueUniformTest<span class=\"token punctuation\">.</span>Uniform</span><span class=\"token punctuation\">.</span>equals<span class=\"token operator\">-</span><span class=\"token function\">impl0</span><span class=\"token punctuation\">(</span>uniform1<span class=\"token punctuation\">,</span> uniform2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isTrue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 나타난다. 우리는 Uniform(1)을 호출했지만, <code class=\"language-text\">constructor-impl</code>이라는 메서드를 호출하고 있다.\n이는 value class이기 때문에 자동 생성된 것으로</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> constructor_impl<span class=\"token comment\">/* $FF was: constructor-impl*/</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> number <span class=\"token operator\">?</span> number <span class=\"token operator\">&lt;</span> <span class=\"token number\">21</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token class-name\">String</span> var3 <span class=\"token operator\">=</span> <span class=\"token string\">\"Failed requirement.\"</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span>var3<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">return</span> number<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 만들어준다. 즉 팩토리 메서드를 자동 생성해주는 것과 같다!!\n뿐만 아니라 실제 인스턴스를 만들지 않고, 컴파일 단계에서 primitive 타입으로 변경되어 훨씬 효율적인 코드를 작성할 수 있게 된다.</p>\n<p>그 외에도 value class의 특징들은 <a href=\"https://kotlinlang.org/docs/inline-classes.html\">공식문서 Value class</a>를 참고해볼 수 있다!</p>","frontmatter":{"date":"June 29, 2023","title":"Value Class","categories":"Kotlin","author":"지구깜냥","emoji":"🌱"},"fields":{"slug":"/passion/Kotlin/value-class/"}},"site":{"siteMetadata":{"siteUrl":"https://ggam-nyang.github.io","comments":{"utterances":{"repo":"ggam-nyang/ggam-nyang.github.io"}}}}},"pageContext":{"slug":"/steady/sideproject/setting-gradle/","nextSlug":"/passion/Numble-Deploy/Numble_Deploy_DeepDive/","prevSlug":"/passion/Kotlin/value-class/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}