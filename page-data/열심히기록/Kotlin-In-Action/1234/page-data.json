{"componentChunkName":"component---src-templates-blog-template-js","path":"/열심히기록/Kotlin-In-Action/1234/","result":{"data":{"cur":{"id":"50c7061e-1924-505a-8af7-03cd1f79ea67","html":"<p>중복되는 내용이지만 Kotlin in Action 1,2,3,4장 정리를 모아놓았습니다.</p>\n<h3 id=\"kotlin\" style=\"position:relative;\"><a href=\"#kotlin\" aria-label=\"kotlin permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kotlin</h3>\n<p>1장</p>\n<ul>\n<li>코틀린의 빌더 패턴이란, 디자인 패턴 빌더 패턴과 같다. (p.44)\n<br></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token function\">JuiceBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">water</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">ice</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">orange</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">banana</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이처럼 Builder를 만들어 사용하는데, 파라미터가 명시적이고 필수 파라미터를 확인할 수 있다.\n외에도 여러 이점이 있어 Lombok에서도 지원하는 패턴인데\n코틀린의 경우,</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token function\">Juice</span><span class=\"token punctuation\">(</span>\n    water <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n    ice <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n    oranger <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n    banana <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>생성자에 변수 명을 명시할 수 있고, 매개변수별로 기본값을 가질 수 있다.\n때문에 이 자체로 빌더 패턴이 구현되어 있어 이를 용이하게 사용하면 좋다.</p>\n<ul>\n<li>1장은 코틀린의 주요 특성인 다양한 플랫폼, 정적 타입 언어, 함수형 + 객체 지향, 무료 오픈소스 대해 말한다.</li>\n<li>코틀린의 철학\n<ul>\n<li>실용성</li>\n<li>간결성</li>\n<li>안전성</li>\n<li>상호운용성</li>\n</ul>\n</li>\n</ul>\n<p>2장</p>\n<ul>\n<li>대입문은 자바에서 식, 코틀린에서는 문이다.\n<ul>\n<li>코틀린에서는 <code class=\"language-text\">a = b = c</code>와 같이 사용할 수 없다.</li>\n</ul>\n</li>\n<li>모든 변수를 val 선언, 변경이 불가피할때만 var 이용하자.</li>\n<li>자바의 문자열 접합 연산은 내부적으로 <code class=\"language-text\">StringBuilder</code>를 사용해 효율적이다.\n<ul>\n<li>코틀린의 문자열 템플릿 또한 마찬가지로 효율적.</li>\n</ul>\n</li>\n<li>프로퍼티를 기본으로 지원하여, Class의 필드에 대해 게터 세터가 생성된다.</li>\n<li>변수 타입은 is로 검사하고, 이후엔 스마트 캐스트를 통해 캐스팅하지 않아도 검사된 타입으로 취급한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sth <span class=\"token keyword\">is</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">val</span> newSth <span class=\"token operator\">=</span> sth <span class=\"token keyword\">as</span> Int <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 불필요</span>\n<span class=\"token comment\">// 캐스팅하지 않아도 if 안에선 sth은 Int로 스마트 캐스팅 되어있다.</span></code></pre></div>\n<ul>\n<li>Exception 또한 식이다. 자바와 사용은 같으나 throws 절이 없다.\n<ul>\n<li>자바는 checked Exception 에 대해 명시적 처리를 하지만 코틀린은 checked, unchecked를 구분하지 않는다.</li>\n</ul>\n</li>\n</ul>\n<p>3장 함수 정의와 호출</p>\n<ul>\n<li>프로퍼티도 최상위 수준에 놓을 수 있다. (함수도)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">package</span> blog\n\n<span class=\"token keyword\">val</span> aString<span class=\"token operator\">:</span> String\n<span class=\"token keyword\">var</span> aInt<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> THE_INT <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"HI test\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>const를 붙이면 pubilc static final 이 된다.</li>\n<li><code class=\"language-text\">fun String.lastChar(): Char</code> 처럼 확장할 클래스의 이름(수신 객체 타입)을 명시하고 확장 함수를 정의할 수 있다.</li>\n<li>확장함수가 캡슐화를 깨지는 않는다. 내부적으로 수신 객체를 첫 번째 인자로 받는 정적 메서드이다.\n<ul>\n<li>당연히 확장 함수 내부에서 private, protected 멤버는 접근이 불가하다.</li>\n<li>확장 함수는 단지 정적 메서드 호출에 대한 문법적인 편의(<em>syntatic sugar</em>)</li>\n</ul>\n</li>\n<li>Java <code class=\"language-text\">...</code> == Kotlin <code class=\"language-text\">vararg</code> (가변 길이 인자)\n<ul>\n<li><code class=\"language-text\">*aList</code>는 배열을 명시적으로 풀어준다.</li>\n</ul>\n</li>\n<li>중위 호출은 <code class=\"language-text\">infix</code> 변경자를 함수 앞에 붙여주어 구현한다.\n<ul>\n<li>ex) <code class=\"language-text\">infix fun Any.to(other: Any) = Pair(this, other)</code></li>\n</ul>\n</li>\n</ul>\n<p>4장 클래스, 객체, 인터페이스</p>\n<ul>\n<li>interface는 구현된 메서드를 가진다.(default method 처럼)\n<ul>\n<li>default 구현이 둘 이상의 인터페이스가 가지면, override 필수</li>\n</ul>\n</li>\n<li>Kotlin의 class, method는 기본이 final\n<ul>\n<li>상속을 허용하려면 <code class=\"language-text\">open</code> (<code class=\"language-text\">override</code> 메서드는 open이다.)</li>\n<li>이로 인해 스마트 캐스트가 가능하다는 이점이 생긴다.\n<ul>\n<li>프로퍼티가 val + 커스텀 접근자 x 일 때만 스마트 캐스트</li>\n<li>상속 후 프로퍼티의 커스텀 접근자를 정의하면 스마트 캐스트 요구 사항이 깨질 수 있다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">package-private</code>은 없고, 모듈 내부에서만 접근 가능한 <code class=\"language-text\">internal</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">internal</span> <span class=\"token keyword\">open</span> <span class=\"token keyword\">class</span> TalkativeButton<span class=\"token operator\">:</span> Focusable <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">yell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"HEY!\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">whisper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"whisper\"</span></span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> TalkativeButton<span class=\"token punctuation\">.</span><span class=\"token function\">giveSpeech</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// ERROR: internal class이므로 노출할 수 없다. </span>\n    <span class=\"token function\">yell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ERROR: private method</span>\n  \n    <span class=\"token function\">whisper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ERROR: protected method 같은 패키지에서 접근이 불가하다.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>kotlin nested class는 변경자가 없으면 java 내부 static class와 같다.\n<ul>\n<li>바깥 클래스에 대한 참조를 포함하게 하려면 <code class=\"language-text\">inner</code> 변경자를 사용한다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">sealed</code> 클래스 상속을 제한한다.\n<ul>\n<li>하위 클래스는 모두 상위 클래스의 nested class 로 존재해야한다.</li>\n<li><code class=\"language-text\">when</code>에서 else문이 강제되지 않아, 예외로 인한 버그를 예방한다.</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><code class=\"language-text\">sealed</code> 접근자의 제한과 코틀린 1.5에서 개선된 점을 알아보쟈\n<a href=\"https://ggam-nyang.github.io/%EC%97%B4%EC%8B%AC%ED%9E%88%EA%B8%B0%EB%A1%9D/Kotlin-in-Action/sealed\">sealed 접근자</a></p>\n</blockquote>\n<ul>\n<li>주 생성자, 부 생성자, 초기화 블록 등이 있다.\n<ul>\n<li>DI 프레임워크 등에서 parameter 없는 생성자가 필요한 경우가 있는데, 코틀린은 default 값을 통해 해결한다. (안전성과 가독성에 괜찮은걸까?)</li>\n<li>인터페이스는 프로퍼티를 가질 수 있고, 이는 하위 클래스가 확장 시 구현해야한다.</li>\n</ul>\n</li>\n<li>프로퍼티는 값을 저장하는 프로퍼티, 커스텀 접근자에서 매번 계산하는 프로퍼티 두 가지가 있다.\n<ul>\n<li>쉽게 말해 게터를 정의한 경우와, 값이 대입된 프로퍼티 두 가지이다.\n<ul>\n<li>setter에서 <code class=\"language-text\">field</code>로 필드 값을 가져올 수 있다.</li>\n<li><code class=\"language-text\">private get</code>, <code class=\"language-text\">private set</code>으로 접근자의 가시성 변경 가능하다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">by</code> 키워드로 위임을 할 수 있다.\n<ul>\n<li>코틀린은 상속에서 발생하는 문제를 위해 기본이 <code class=\"language-text\">final</code>이다.</li>\n</ul>\n<br> 상속 불가인 클래스에 대해 데코레이터 패턴을 이용해 하위 타입처럼 생성할 수 있다.\n<ul>\n<li>데코레이터 패턴의 구현의 복잡성을 지원해주는 것이 바로 <code class=\"language-text\">by</code></li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> DelegatingCollection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">:</span> Collection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> innerList <span class=\"token operator\">=</span> arrayListOf<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">val</span> size<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> innerList<span class=\"token punctuation\">.</span>size\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Boolean <span class=\"token operator\">=</span> innerList<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> DelegatingCollection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n    innerList<span class=\"token operator\">:</span> Collection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">=</span> ArrayList<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Collection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token keyword\">by</span> innerList <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>위의 과정이 아래와 같이 단순해진다.</li>\n<li>object 선언은 싱글턴 패턴을 지원한다.</li>\n<li>코틀린은 <code class=\"language-text\">static</code> 이 없지만, <code class=\"language-text\">패키지 수준의 최상위 함수 + object</code>가 있다.</li>\n<li><code class=\"language-text\">Companion Object</code> 내부에 private 생성자, 정적 멤버를 생성하기 좋다\n<ul>\n<li><code class=\"language-text\">Companion Object</code>는 바깥 클래스의 private 멤버에 접근이 가능하기 때문이다.</li>\n<li>여기에 팩토리 패턴을 구현하자.</li>\n<li>자바에서 사용하기 위해 static으로 만들고 싶다면 <code class=\"language-text\">@JvmStatic</code></li>\n</ul>\n</li>\n</ul>","excerpt":"중복되는 내용이지만 Kotlin in Action 1,2,3,4장 정리를 모아놓았습니다. Kotlin 1장 코틀린의 빌더 패턴이란, 디자인 패턴 빌더 패턴과 같다. (p.44)\n 이처럼 Builder를 만들어 사용하는데, 파라미터가 명시적이고 필수 파라미터를 확인할 수 있다.\n외에도 여러 이점이 있어 Lombok에서도 지원하는 패턴인데\n코틀린의 경우, 생성자에 변수 명을 명시할 수 있고, 매개변수별로 기본값을 가질 수 있다.\n때문에 이 자체로 빌더 패턴이 구현되어 있어 이를 용이하게 사용하면 좋다. 1장은 코틀린의 주요 특성인 다양한 플랫폼, 정적 타입 언어, 함수형 + 객체 지향, 무료 오픈소스 대해 말한다. 코틀린의 철학 실용성 간결성 안전성 상호운용성 2장 대입문은 자바에서 식, 코틀린에서는 문이다. 코틀린에서는 와 같이 사용할 수 없다. 모든 변수를 val 선언, 변경이 불가피할때만 var 이용하자. 자바의 문자열 접합 연산은 내부적으로 를 사용해 효율적이다. 코틀린의 문자…","frontmatter":{"date":"March 24, 2023","title":"Kotlin-in-Action 1 ~ 4장","categories":"Kotlin","author":"지구깜냥","emoji":"🌱"},"fields":{"slug":"/열심히기록/Kotlin-In-Action/1234/"}},"next":{"id":"7a123a0c-99de-59d1-81bd-bfed876d6a65","html":"<h2 id=\"-개발\" style=\"position:relative;\"><a href=\"#-%EA%B0%9C%EB%B0%9C\" aria-label=\" 개발 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💻 개발</h2>\n<h3 id=\"kotlin\" style=\"position:relative;\"><a href=\"#kotlin\" aria-label=\"kotlin permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kotlin</h3>\n<p>4장 클래스, 객체, 인터페이스</p>\n<ul>\n<li>interface는 구현된 메서드를 가진다.(default method 처럼)\n<ul>\n<li>default 구현이 둘 이상의 인터페이스가 가지면, override 필수</li>\n</ul>\n</li>\n<li>Kotlin의 class, method는 기본이 final\n<ul>\n<li>상속을 허용하려면 <code class=\"language-text\">open</code> (<code class=\"language-text\">override</code> 메서드는 open이다.)</li>\n<li>이로 인해 스마트 캐스트가 가능하다는 이점이 생긴다.\n<ul>\n<li>프로퍼티가 val + 커스텀 접근자 x 일 때만 스마트 캐스트</li>\n<li>상속 후 프로퍼티의 커스텀 접근자를 정의하면 스마트 캐스트 요구 사항이 깨질 수 있다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">package-private</code>은 없고, 모듈 내부에서만 접근 가능한 <code class=\"language-text\">internal</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">internal</span> <span class=\"token keyword\">open</span> <span class=\"token keyword\">class</span> TalkativeButton<span class=\"token operator\">:</span> Focusable <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">yell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"HEY!\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">whisper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"whisper\"</span></span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> TalkativeButton<span class=\"token punctuation\">.</span><span class=\"token function\">giveSpeech</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// ERROR: internal class이므로 노출할 수 없다. </span>\n    <span class=\"token function\">yell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ERROR: private method</span>\n  \n    <span class=\"token function\">whisper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ERROR: protected method 같은 패키지에서 접근이 불가하다.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>kotlin nested class는 변경자가 없으면 java 내부 static class와 같다.\n<ul>\n<li>바깥 클래스에 대한 참조를 포함하게 하려면 <code class=\"language-text\">inner</code> 변경자를 사용한다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">sealed</code> 클래스 상속을 제한한다.\n<ul>\n<li>하위 클래스는 모두 상위 클래스의 nested class 로 존재해야한다.</li>\n<li><code class=\"language-text\">when</code>에서 else문이 강제되지 않아, 예외로 인한 버그를 예방한다.</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><code class=\"language-text\">sealed</code> 접근자의 제한과 코틀린 1.5에서 개선된 점을 알아보쟈\n<a href=\"https://ggam-nyang.github.io/%EC%97%B4%EC%8B%AC%ED%9E%88%EA%B8%B0%EB%A1%9D/Kotlin-in-Action/sealed\">sealed 접근자</a></p>\n</blockquote>\n<ul>\n<li>주 생성자, 부 생성자, 초기화 블록 등이 있다.\n<ul>\n<li>DI 프레임워크 등에서 parameter 없는 생성자가 필요한 경우가 있는데, 코틀린은 default 값을 통해 해결한다. (안전성과 가독성에 괜찮은걸까?)</li>\n<li>인터페이스는 프로퍼티를 가질 수 있고, 이는 하위 클래스가 확장 시 구현해야한다.</li>\n</ul>\n</li>\n<li>프로퍼티는 값을 저장하는 프로퍼티, 커스텀 접근자에서 매번 계산하는 프로퍼티 두 가지가 있다.\n<ul>\n<li>쉽게 말해 게터를 정의한 경우와, 값이 대입된 프로퍼티 두 가지이다.\n<ul>\n<li>setter에서 <code class=\"language-text\">field</code>로 필드 값을 가져올 수 있다.</li>\n<li><code class=\"language-text\">private get</code>, <code class=\"language-text\">private set</code>으로 접근자의 가시성 변경 가능하다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">by</code> 키워드로 위임을 할 수 있다.\n<ul>\n<li>코틀린은 상속에서 발생하는 문제를 위해 기본이 <code class=\"language-text\">final</code>이다.</li>\n</ul>\n<br> 상속 불가인 클래스에 대해 데코레이터 패턴을 이용해 하위 타입처럼 생성할 수 있다.\n<ul>\n<li>데코레이터 패턴의 구현의 복잡성을 지원해주는 것이 바로 <code class=\"language-text\">by</code></li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> DelegatingCollection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">:</span> Collection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> innerList <span class=\"token operator\">=</span> arrayListOf<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">val</span> size<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> innerList<span class=\"token punctuation\">.</span>size\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Boolean <span class=\"token operator\">=</span> innerList<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> DelegatingCollection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n    innerList<span class=\"token operator\">:</span> Collection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">=</span> ArrayList<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Collection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token keyword\">by</span> innerList <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>위의 과정이 아래와 같이 단순해진다.</li>\n<li>object 선언은 싱글턴 패턴을 지원한다.</li>\n<li>코틀린은 <code class=\"language-text\">static</code> 이 없지만, <code class=\"language-text\">패키지 수준의 최상위 함수 + object</code>가 있다.</li>\n<li><code class=\"language-text\">Companion Object</code> 내부에 private 생성자, 정적 멤버를 생성하기 좋다\n<ul>\n<li><code class=\"language-text\">Companion Object</code>는 바깥 클래스의 private 멤버에 접근이 가능하기 때문이다.</li>\n<li>여기에 팩토리 패턴을 구현하자.</li>\n<li>자바에서 사용하기 위해 static으로 만들고 싶다면 <code class=\"language-text\">@JvmStatic</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"spring\" style=\"position:relative;\"><a href=\"#spring\" aria-label=\"spring permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring</h3>\n<p>MVC 1 강의를 끝냈고, 2도 달리자!\n(아는 부분은 빠르게 넘어가되, 천천히 하자)</p>\n<p>Numble을 통해 프로젝트 진행하며 공부하자! (강의만 듣기 노노)</p>\n<h2 id=\"-오늘\" style=\"position:relative;\"><a href=\"#-%EC%98%A4%EB%8A%98\" aria-label=\" 오늘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌙 오늘</h2>\n<ul>\n<li>Good\n<ul>\n<li>안과 치료 클리어!</li>\n<li>Spring 강의 마무리</li>\n<li>Numble 프로젝트 시작</li>\n</ul>\n</li>\n</ul>\n<br>\n- Be Better\n  - 아침에 어제 계획 확인하기\n  - 독서 시간 빼기\n<h2 id=\"️-내일\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EB%82%B4%EC%9D%BC\" aria-label=\"️ 내일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>☀️ 내일</h2>\n<ul>\n<li>Kotlin\n<ul>\n<li>5장 읽기</li>\n</ul>\n</li>\n<li>Spring\n<ul>\n<li>강의 1강</li>\n<li>Numble 프로젝트 개시</li>\n</ul>\n</li>\n<li>정형외과</li>\n<li>Algorithm</li>\n<li>🔥 독서</li>\n</ul>\n<p>ps. 개발 관련 내용은 따로 남기는 것이 좋을듯!</p>","frontmatter":{"date":"March 24, 2023","title":"2023.03.24(Fri)","categories":"데일리","author":"지구깜냥","emoji":"🌱"},"fields":{"slug":"/꾸준히기록/daily/2023/03/24/"}},"prev":{"id":"c885422a-23e4-58a0-b93a-82c7a5cf218e","html":"<h2 id=\"-개발\" style=\"position:relative;\"><a href=\"#-%EA%B0%9C%EB%B0%9C\" aria-label=\" 개발 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💻 개발</h2>\n<h3 id=\"kotlin\" style=\"position:relative;\"><a href=\"#kotlin\" aria-label=\"kotlin permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kotlin</h3>\n<p>람다 부분을 읽는 중..\n정리하며 읽는게 시간을 많이 뺏진 않는듯?!</p>\n<h3 id=\"numble-프로젝트\" style=\"position:relative;\"><a href=\"#numble-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8\" aria-label=\"numble 프로젝트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Numble 프로젝트</h3>\n<p>프로젝트 세팅만 해뒀다.</p>\n<h2 id=\"-오늘\" style=\"position:relative;\"><a href=\"#-%EC%98%A4%EB%8A%98\" aria-label=\" 오늘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌙 오늘</h2>\n<ul>\n<li>Kotlin in Action 5장-1</li>\n<li>Numble 프로젝트 세팅</li>\n<li>아침에 계획 확인하기 성공</li>\n</ul>\n<br>\n- Be Better\n  - 한가지 일에 집중!\n<h2 id=\"️-내일\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EB%82%B4%EC%9D%BC\" aria-label=\"️ 내일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>☀️ 내일</h2>\n<ul>\n<li>등산 🏔️</li>\n</ul>","frontmatter":{"date":"March 25, 2023","title":"2023.03.25(Sat)","categories":"데일리","author":"지구깜냥","emoji":"🌱"},"fields":{"slug":"/꾸준히기록/daily/2023/03/25/"}},"site":{"siteMetadata":{"siteUrl":"https://ggam-nyang.github.io","comments":{"utterances":{"repo":"ggam-nyang/ggam-nyang.github.io"}}}}},"pageContext":{"slug":"/열심히기록/Kotlin-In-Action/1234/","nextSlug":"/꾸준히기록/daily/2023/03/24/","prevSlug":"/꾸준히기록/daily/2023/03/25/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}