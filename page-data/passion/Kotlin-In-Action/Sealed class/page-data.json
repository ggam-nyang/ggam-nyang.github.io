{"componentChunkName":"component---src-templates-blog-template-js","path":"/passion/Kotlin-In-Action/Sealed class/","result":{"data":{"cur":{"id":"c3418f11-70ed-54d9-b826-c3b3a13cb0b0","html":"<h2 id=\"sealed-class\" style=\"position:relative;\"><a href=\"#sealed-class\" aria-label=\"sealed class permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sealed Class</h2>\n<blockquote>\n<p><a href=\"https://kotlinlang.org/docs/sealed-classes.html\">코틀린 sealed class 공식문서</a>를 참고했습니다.</p>\n</blockquote>\n<h3 id=\"목적\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%EC%A0%81\" aria-label=\"목적 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>목적</h3>\n<p>클래스의 상속을 더 제어하기 위해 사용한다.</p>\n<p>코틀린은 예약어를 통해 컴파일 과정에서 편의성을 제공하는 방식을 좋아하는 듯 하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">interface</span> Expr\n<span class=\"token keyword\">class</span> <span class=\"token function\">Num</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> value<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Expr\n<span class=\"token keyword\">class</span> <span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> left<span class=\"token operator\">:</span> Expr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> right<span class=\"token operator\">:</span> Expr<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Expr\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> Expr<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">is</span> Num <span class=\"token operator\">-></span> e<span class=\"token punctuation\">.</span>value\n        <span class=\"token keyword\">is</span> Sum <span class=\"token operator\">-></span> <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span> <span class=\"token operator\">-></span>\n            <span class=\"token keyword\">throw</span> <span class=\"token function\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Unknown expression\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 구조에서, when 식의 else를 주목하자.</p>\n<p><code class=\"language-text\">Expr</code>를 구현한 새로운 Class가 생긴다면, else문은 논리 오류가 될 수 있다.\n즉, 하위 클래스가 추가 됐을 때 컴파일러가 when이 모든 분기를 처리하는지 알 수 없다.\n또 새로운 클래스 처리를 잊어버려도 알 수 없다.</p>\n<p>이 <strong>문제</strong>에 대한 해법이 <code class=\"language-text\">sealed class</code>이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> Expr <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">class</span> <span class=\"token function\">Num</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> value<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Expr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">class</span> <span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> left<span class=\"token operator\">:</span> Expr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> right<span class=\"token operator\">:</span> Expr<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Expr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> Expr<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">is</span> Num <span class=\"token operator\">-></span> e<span class=\"token punctuation\">.</span>value\n        <span class=\"token keyword\">is</span> Sum <span class=\"token operator\">-></span> <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">sealed class</code>를 상속하는 하위 클래스는 <del>무조건 중첩 클래스로 구현되어야 한다.</del>\nwhen식이 모든 하위 타입을 검사하는지 컴파일러는 알 수 있고, 새로운 클래스가 분기처리 되지 않으면 컴파일 오류가 난다.</p>\n<p><code class=\"language-text\">sealed class</code>는 그 자체로 abstract 하고, 인스턴스화 할 수 없다.</p>\n<p>코틀린 1.5부터는 너무 많은 제약을 해소했다.</p>\n<p>하위 클래스는 중첩 클래스가 아닌 <code class=\"language-text\">sealed class</code>가 정의된 패키지 안에서 구현할 수 있고,\n<code class=\"language-text\">sealed interface</code>도 추가됐다.</p>\n<p>기존에 <code class=\"language-text\">sealed interface</code>가 없던 이유는 자바에서 해당 인터페이스를 확장하지 못하게 할 방법이 없기 때문이라고 했는데,\n이 문제가 어떻게 해결된 것인지 모르겠다.</p>","excerpt":"Sealed Class 코틀린 sealed class 공식문서를 참고했습니다. 목적 클래스의 상속을 더 제어하기 위해 사용한다. 코틀린은 예약어를 통해 컴파일 과정에서 편의성을 제공하는 방식을 좋아하는 듯 하다. 이 구조에서, when 식의 else를 주목하자. 를 구현한 새로운 Class가 생긴다면, else문은 논리 오류가 될 수 있다.\n즉, 하위 클래스가 추가 됐을 때 컴파일러가 when이 모든 분기를 처리하는지 알 수 없다.\n또 새로운 클래스 처리를 잊어버려도 알 수 없다. 이 문제에 대한 해법이 이다. 를 상속하는 하위 클래스는 무조건 중첩 클래스로 구현되어야 한다.\nwhen식이 모든 하위 타입을 검사하는지 컴파일러는 알 수 있고, 새로운 클래스가 분기처리 되지 않으면 컴파일 오류가 난다. 는 그 자체로 abstract 하고, 인스턴스화 할 수 없다. 코틀린 1.5부터는 너무 많은 제약을 해소했다. 하위 클래스는 중첩 클래스가 아닌 가 정의된 패키지 안에서 구현할 수 있고…","frontmatter":{"date":"March 31, 2023","title":"Sealed Class","categories":"Kotlin","author":"지구깜냥","emoji":"🌱"},"fields":{"slug":"/passion/Kotlin-In-Action/Sealed class/"}},"next":{"id":"e5242703-d0c6-50d8-befa-51ddeb5be989","html":"<h2 id=\"terraform\" style=\"position:relative;\"><a href=\"#terraform\" aria-label=\"terraform permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Terraform</h2>\n<p><a href=\"https://developer.hashicorp.com/terraform/intro\">테라폼 공식문서</a>\n<br></p>\n<h3 id=\"테라폼\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EB%9D%BC%ED%8F%BC\" aria-label=\"테라폼 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테라폼?</h3>\n<p>클라우드 리소스 + on-prem 리소스를 <strong>코드</strong>로 관리할 수 있는 도구.\n컴퓨팅, 스토리지, 네트워크 같은 low-level 뿐 아니라 DNS, SaaS 까지도 관리할 수 있다.</p>\n<h3 id=\"어떻게\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%96%BB%EA%B2%8C\" aria-label=\"어떻게 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어떻게?</h3>\n<p>Terraform은 API를 통해 클라우드 플랫폼 및 기타 서비스에서 리소스를 생성하고 관리한다.\n사실상 거의 모든 플랫폼과 함께 동작할 수 있다.</p>\n<p>이미 Terraform에서는 다양한 유형의 리소스, 서비스를 관리하기 위해 providers가 작성되어 있고\nAWS, Azure, Kubernetes, Github 등등 지원한다.</p>\n<ul>\n<li>Write\n<ul>\n<li>여러 클라우드 공급자 및 서비스에 걸쳐 있을 수 있는 리소스를 정의한다.</li>\n</ul>\n예를 들어 보안 그룹과 로드 밸런서가 있는 VPC(Virtual Private Cloud) 네트워크의 가상 시스템에 애플리케이션을 배포하는 구성을 생성할 수 있다.</li>\n<li>Plan\n<ul>\n<li>기존 인프라 기반으로 생성, 업데이트 또는 삭제할 인프라에 관한 계획(스크립트?) 작성.</li>\n</ul>\n</li>\n<li>Apply\n<ul>\n<li>승인을 받고, 리소스 종속성을 고려하여 순서대로 실행.</li>\n<li>예를 들어 VPC의 속성을 업데이트하고 해당 VPC의 가상 시스템 수를 변경하면 Terraform이 가상 시스템을 확장하기 전에 VPC를 다시 생성.</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"https://cloudbim.tistory.com/14\">https://cloudbim.tistory.com/14</a>\n해당 블로그를 참고해서 진행했다.</p>\n<p>.tf 파일을 생성하여 terraform을 통해 vpc, subnet, igw, rt 그리고 ec2까지 자동 생성했다.\n이후 <code class=\"language-text\">terraform destroy</code>로 한번에 해당 리소스를 삭제할 수 있다.</p>\n<br>\n이제 Ansible을 공부해서 더 적용해보자!","frontmatter":{"date":"March 28, 2023","title":"테라폼이란?","categories":"DevOps","author":"지구깜냥","emoji":"🔥"},"fields":{"slug":"/passion/Numble-Deploy/Terraform/"}},"prev":{"id":"35697a62-53f3-5eac-b473-210c520b36fe","html":"<h2 id=\"ci\" style=\"position:relative;\"><a href=\"#ci\" aria-label=\"ci permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CI</h2>\n<p>보통 개인 branch -> main merge 되면서 Build/Test 하고 Artifact Repo를 통해 필요한 걸 받아오고..?</p>\n<br>\n우리는 간단하게\n<p>젠킨스가 하는 일:\n깃허브에서 코드가 main branch에 올라가면, hook으로 어딘가로 알려줄 수 있음\n그걸 Jenkins에 쏘고 해당 레포를 clone 한다던지 할 수 있음.</p>\n<p>Jenkins pipeline으로 만들고 Github url 입력.</p>\n<p>pipeline SCM - github repo JENKINSFILE을 읽고 동작함.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">docker</span> pull jenkins/jenkins:lts-jdk11\n<span class=\"token function\">docker</span> run <span class=\"token parameter variable\">--name</span> jenkins <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8080</span>:8080 <span class=\"token parameter variable\">-v</span> jenkins:/var/jenkins_home jenkins/jenkins:lts-jdk11</code></pre></div>\n<h3 id=\"terraform\" style=\"position:relative;\"><a href=\"#terraform\" aria-label=\"terraform permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Terraform</h3>\n<p>ec2 1개 Jenkins, 1개 Web Server.\nPrivate key, Public key를 어디서 어디 것을 알아야 할지.</p>\n<p>aws key 저장소에 private key를 미리 저장.\nA에서 private 다운, B에선 public을 등록해서?</p>\n<p>Ec2를 띄우는건 Terraform으로 가능하지만\n그 안에 구성을 만드는건 Ansible을 사용해야함.</p>\n<h3 id=\"deploy\" style=\"position:relative;\"><a href=\"#deploy\" aria-label=\"deploy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Deploy</h3>\n<p>Shell script, Python, Jenkins, Ansible 등으로 할 수 있음.</p>\n<p>Deploy용 Ansible을 작성.</p>\n<p>두서 없이 받아적었는데, 정리해보자면\nTerraform: Ec2 등 클라우드 리소스 생성\nJenkins: 빌드 및 배포 자동화 (main branch push를 감지)\nAnsible: Terraform으로 구축한 리소스(서버) 환경 구성</p>\n<p>예를 들어, terraform으로 aws 구축 -> Jenkins 서버에서 빌드 -> Ansible 스크립트를 다른 ec2에서 실행하도록</p>\n<p>이런 느낌으로 받아들였다. 좀 더 진행을 해보며 구체화 해보자!</p>","frontmatter":{"date":"March 31, 2023","title":"1차 세션","categories":"DevOps","author":"지구깜냥","emoji":"🔥"},"fields":{"slug":"/passion/Numble-Deploy/호스트님 1차 세션/"}},"site":{"siteMetadata":{"siteUrl":"https://ggam-nyang.github.io","comments":{"utterances":{"repo":"ggam-nyang/ggam-nyang.github.io"}}}}},"pageContext":{"slug":"/passion/Kotlin-In-Action/Sealed class/","nextSlug":"/passion/Numble-Deploy/Terraform/","prevSlug":"/passion/Numble-Deploy/호스트님 1차 세션/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}