{"componentChunkName":"component---src-templates-blog-template-js","path":"/passion/bottle-letter/SpringSecurity-login/","result":{"data":{"cur":{"id":"0a6c5c0a-bfc2-56f7-9388-43b7f1af40a2","html":"<blockquote>\n<p><a href=\"https://github.com/HoYunBros/bottle-letter-be\">Bottle-letter</a> 프로젝트 기록</p>\n</blockquote>\n<p>Spring Security를 사용해 로그인을 구현하며 Filter를 이용한 방식과 Argument Resolver를 이용한 방식을 알아봤다.</p>\n<h3 id=\"filter를-이용한-로그인\" style=\"position:relative;\"><a href=\"#filter%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%A1%9C%EA%B7%B8%EC%9D%B8\" aria-label=\"filter를 이용한 로그인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Filter를 이용한 로그인</h3>\n<p>먼저\bSpring Security의 동작 원리와 구조를 이해해보자.\n<a href=\"https://spring.io/guides/topicals/spring-security-architecture/\">https://spring.io/guides/topicals/spring-security-architecture/</a> 공식 레퍼런스에 잘 정리가 되어 있지만 간단히 설명을 해보자.</p>\n<ul>\n<li>요청이 오면 Spring Security의 FilterChain이 가로챈다.</li>\n<li>Authentication 객체를 생성해서 security context에 저장하는데, 이 과정을 간략히 요약하자면\n<ul>\n<li>UsernamePasswordAuthenticationFilter 앞에 커스텀한 JwtFilter를 생성한다.</li>\n<li>커스텀 필터에서는 헤더의 jwt Token을 파싱하여 분석하고 인증한다.</li>\n<li>Security에서 제공하는 <code class=\"language-text\">UserDetail, UserDetailService</code> 와 같은 인터페이스를 구현한다.</li>\n<li>인증된 유저는 Authentication 객체로 Security Context에 저장된다.</li>\n</ul>\n</li>\n</ul>\n<p>위 내용 말고도, Security가 제공하는 기능은 너무 많지만 나는 위와 같은 방식으로 인증을 구현했다.</p>\n<p>장점</p>\n<ul>\n<li>모든 API에 대해 공통 인증을 할 수 있다</li>\n<li>대규모 환경에서 인증 로직을 일괄 처리할 수 있다</li>\n</ul>\n<p>단점</p>\n<ul>\n<li>구현 코드의 양이 많다</li>\n<li>복잡한 작동 방식을 이해해야 한다 -> 인증 구현과 테스트 작성에 어려움이 있다</li>\n</ul>\n<p>정도로 정리할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Component</span>  \n<span class=\"token keyword\">class</span> <span class=\"token function\">JwtFilter</span><span class=\"token punctuation\">(</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> jwtUtils<span class=\"token operator\">:</span> JwtUtils  \n<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">OncePerRequestFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n  \n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">doFilterInternal</span><span class=\"token punctuation\">(</span>  \n        request<span class=\"token operator\">:</span> HttpServletRequest<span class=\"token punctuation\">,</span>  \n        response<span class=\"token operator\">:</span> HttpServletResponse<span class=\"token punctuation\">,</span>  \n        filterChain<span class=\"token operator\">:</span> FilterChain  \n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">val</span> authorizationHeader<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Authorization\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?:</span> <span class=\"token keyword\">return</span> filterChain<span class=\"token punctuation\">.</span><span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span>  \n            request<span class=\"token punctuation\">,</span>  \n            response  \n        <span class=\"token punctuation\">)</span>  \n  \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>authorizationHeader<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Bearer \"</span></span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token keyword\">return</span> filterChain<span class=\"token punctuation\">.</span><span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">}</span>        <span class=\"token keyword\">val</span> token <span class=\"token operator\">=</span> authorizationHeader<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Bearer \"</span></span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>  \n  \n        <span class=\"token comment\">// validate token  </span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>jwtUtils<span class=\"token punctuation\">.</span><span class=\"token function\">validation</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token keyword\">val</span> username <span class=\"token operator\">=</span> jwtUtils<span class=\"token punctuation\">.</span><span class=\"token function\">parseUsername</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span>  \n            <span class=\"token keyword\">val</span> authentication<span class=\"token operator\">:</span> Authentication <span class=\"token operator\">=</span> jwtUtils<span class=\"token punctuation\">.</span><span class=\"token function\">getAuthentication</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span>  \n  \n            SecurityContextHolder<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>authentication <span class=\"token operator\">=</span> authentication  \n        <span class=\"token punctuation\">}</span>  \n  \n        filterChain<span class=\"token punctuation\">.</span><span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span>  \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 외에도 JwtFilter, UserDetail, UserService 등 구현해야 할게 많다.</span></code></pre></div>\n<h3 id=\"argument-resolver를-이용한-로그인\" style=\"position:relative;\"><a href=\"#argument-resolver%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%A1%9C%EA%B7%B8%EC%9D%B8\" aria-label=\"argument resolver를 이용한 로그인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Argument Resolver를 이용한 로그인</h3>\n<p><code class=\"language-text\">ArgumentResolver</code>는 어떠한 요청이 컨트롤러에 들어왔을 때, 요청에 들어온 값으로부터 원하는 객체를 만들어내는 일을  간접적으로 해줄 수 있다.</p>\n<p>결과를 먼저 보자면</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"/me\"</span></span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">fun</span> <span class=\"token function\">getMe</span><span class=\"token punctuation\">(</span>  \n    <span class=\"token annotation builtin\">@LoginUser</span> user<span class=\"token operator\">:</span> User  \n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ResponseEntity<span class=\"token operator\">&lt;</span>ApiResponse<span class=\"token operator\">&lt;</span>UserResponse<span class=\"token operator\">></span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">val</span> response <span class=\"token operator\">=</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">getMe</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>  \n    <span class=\"token keyword\">return</span> ResponseEntity<span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span>ApiResponse<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">@LoginUser</code>는 커스텀 어노테이션이다. 이 어노테이션이 붙은 파라미터가 어떻게 처리될까?</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Component</span>  \n<span class=\"token keyword\">class</span> <span class=\"token function\">LoginUserResolver</span><span class=\"token punctuation\">(</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> jwtTokenProvider<span class=\"token operator\">:</span> JwtTokenProvider<span class=\"token punctuation\">,</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> userService<span class=\"token operator\">:</span> UserService  \n<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> HandlerMethodArgumentResolver <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">supportsParameter</span><span class=\"token punctuation\">(</span>parameter<span class=\"token operator\">:</span> MethodParameter<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Boolean <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">return</span> parameter<span class=\"token punctuation\">.</span><span class=\"token function\">hasParameterAnnotation</span><span class=\"token punctuation\">(</span>LoginUser<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">resolveArgument</span><span class=\"token punctuation\">(</span>  \n        parameter<span class=\"token operator\">:</span> MethodParameter<span class=\"token punctuation\">,</span>  \n        mavContainer<span class=\"token operator\">:</span> ModelAndViewContainer<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>  \n        webRequest<span class=\"token operator\">:</span> NativeWebRequest<span class=\"token punctuation\">,</span>  \n        binderFactory<span class=\"token operator\">:</span> WebDataBinderFactory<span class=\"token operator\">?</span>  \n    <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> User <span class=\"token punctuation\">{</span>  \n        <span class=\"token comment\">// ... jwt 토큰 검증 </span>\n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">HandlerMethodArgumentResolver</code>를 확장했고, 이를 위해 두개의 함수를 override했다.\n<code class=\"language-text\">supportsParameter</code>는 해당 파라미터가 @LoginUser 어노테이션을 가지고 있는지 확인한다.\n이 값이 true라면, <code class=\"language-text\">resolveArguement</code>가 실행되고, 이 과정에서 우리가 원하는 jwt 인증을 할 수 있다.</p>\n<p>우리가 평소 Controller 계층에서 HttpRequest, @RequestParam, @RequestBody 등 여러가지 타입의 파라미터를 사용할 수 있는 것은 이때문이다.</p>\n<p>장점</p>\n<ul>\n<li>코드가 간결해진다</li>\n<li>jwt 로직을 컨트롤러와 분리할 수 있다.</li>\n<li>구현이 상대적으로 간편하다</li>\n</ul>\n<p>단점</p>\n<ul>\n<li>인증이 필요한 모든 API에 대해 적용해야한다 -> 일관성이 떨어진다</li>\n<li>Spring Security의 일부 기능들과 통합이 복잡해질 수 있다.</li>\n</ul>","excerpt":"Bottle-letter 프로젝트 기록 Spring Security를 사용해 로그인을 구현하며 Filter를 이용한 방식과 Argument Resolver를 이용한 방식을 알아봤다. Filter를 이용한 로그인 먼저\bSpring Security의 동작 원리와 구조를 이해해보자.\nhttps://spring.io/guides/topicals/spring-security-architecture/ 공식 레퍼런스에 잘 정리가 되어 있지만 간단히 설명을 해보자. 요청이 오면 Spring Security의 FilterChain이 가로챈다. Authentication 객체를 생성해서 security context에 저장하는데, 이 과정을 간략히 요약하자면 UsernamePasswordAuthenticationFilter 앞에 커스텀한 JwtFilter를 생성한다. 커스텀 필터에서는 헤더의 jwt Token을 파싱하여 분석하고 인증한다. Security에서 제공하는  와 같은 인터페이스를 구현한다…","frontmatter":{"date":"August 29, 2023","title":"Spring Security login 구현","categories":"Spring","author":"지구깜냥","emoji":"🌱"},"fields":{"slug":"/passion/bottle-letter/SpringSecurity-login/"}},"next":{"id":"042cd6a4-789e-50ba-b214-f36bebd0cc43","html":"<blockquote>\n<p><a href=\"https://github.com/HoYunBros/bottle-letter-be\">Bottle-letter</a> 프로젝트 기록</p>\n</blockquote>\n<h3 id=\"spring-docs-적용\" style=\"position:relative;\"><a href=\"#spring-docs-%EC%A0%81%EC%9A%A9\" aria-label=\"spring docs 적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring docs 적용</h3>\n<p>Spring Docs는 Swagger와 같이 API docs를 생성해주는 라이브러리다.\n<strong>다른점</strong>은 Spring docs는 테스트 코드를 통해 작성된다.</p>\n<p>Swagger는 Controller를 스캔하고 자동으로 생성해주며, 타이틀과 같은 커스텀 설정은 코드에 함께 기재하게 된다. (보통 어노테이션 방식)\nSpring Docs는 테스트 코드에 API 스펙을 작성하고, asciidoctor를 통해 adoc 파일을 생성하고 html로 변환하여 문서가 작성된다.\n쉽게 말해, 테스트 코드를 통해 HTTP spec이 작성되고, 이를 원하는 대로 문서에 삽입하여 문서를 생성한다.</p>\n<ul>\n<li>상용 코드에 영향을 주지 않는다</li>\n<li>커스텀 하기 용이하다</li>\n<li>테스트를 강제한다.</li>\n</ul>\n<p>이런 장점을 가졌다. 3가지 모두 굉장히 매력적인 장점이라 Swagger보다 Spring docs를 선택하게 됐다.</p>\n<h3 id=\"문제\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C\" aria-label=\"문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제</h3>\n<p>적용 방법은 쉽게 찾을 수 있다. build.gradles.kts의 일부분은 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\">val asciidoctorExt<span class=\"token punctuation\">:</span> Configuration by configurations<span class=\"token punctuation\">.</span>creating\nval snippetsDir by extra <span class=\"token punctuation\">{</span> <span class=\"token function\">file</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">\"build/generated-snippets\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n\ndependencies <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">asciidoctorExt</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">\"org.springframework.restdocs:spring-restdocs-asciidoctor\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\ntasks<span class=\"token punctuation\">.</span>test <span class=\"token punctuation\">{</span>\n    outputs<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>snippetsDir<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\ntasks<span class=\"token punctuation\">.</span>asciidoctor <span class=\"token punctuation\">{</span>\n    inputs<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>snippetsDir<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">configurations</span><span class=\"token punctuation\">(</span>asciidoctorExt<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">dependsOn</span><span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">baseDirFollowsSourceFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    doFirst <span class=\"token punctuation\">{</span>\n        delete <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">file</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">\"src/main/resources/static/docs\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\ntasks<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">\"copyHTML\"</span></span><span class=\"token punctuation\">,</span> Copy<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dependsOn</span><span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">.</span>asciidoctor<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token function\">file</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token expression\">tasks<span class=\"token punctuation\">.</span>asciidoctor<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>outputDir</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/index.html\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">into</span><span class=\"token punctuation\">(</span><span class=\"token function\">file</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">\"src/main/resources/static/docs\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\ntasks<span class=\"token punctuation\">.</span>build <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dependsOn</span><span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">getByName</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">\"copyHTML\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\ntasks<span class=\"token punctuation\">.</span>bootJar <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dependsOn</span><span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">.</span>asciidoctor<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">dependsOn</span><span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">getByName</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">\"copyHTML\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>내가 작성한 index.adoc 파일은 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"asciidoc\"><pre class=\"language-asciidoc\"><code class=\"language-asciidoc\"><span class=\"token macro\"><span class=\"token function\">ifndef</span><span class=\"token punctuation\">::</span>snippets<span class=\"token attributes\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span></span>\n<span class=\"token attribute-entry tag\">:snippets: /build/generated-snippets</span>\n<span class=\"token macro\"><span class=\"token function\">endif</span><span class=\"token punctuation\">::</span><span class=\"token attributes\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span></span>\n<span class=\"token title important\"><span class=\"token punctuation\">=</span> API Document</span>\n<span class=\"token attribute-entry tag\">:doctype: book</span>\n<span class=\"token attribute-entry tag\">:icons: font</span>\n<span class=\"token attribute-entry tag\">:source-highlighter: highlightjs</span>\n<span class=\"token attribute-entry tag\">:toc: left</span>\n<span class=\"token attribute-entry tag\">:toclevels: 3</span>\n<span class=\"token attribute-entry tag\">:sectlinks:</span>\n<span class=\"token attribute-entry tag\">:docinfo: shared-head</span>\n\n<span class=\"token title important\"><span class=\"token punctuation\">==</span> 소개</span>\nBottle Letter API\n\n<span class=\"token macro\"><span class=\"token function\">include</span><span class=\"token punctuation\">::</span>user.adoc<span class=\"token attributes\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span></span>\n<span class=\"token macro\"><span class=\"token function\">include</span><span class=\"token punctuation\">::</span>bottle.adoc<span class=\"token attributes\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span></span></code></pre></div>\n<p><code class=\"language-text\">user.adoc</code>과 <code class=\"language-text\">bottle.adoc</code>은\noperation::bottle-me-get[snippets=‘http-request,http-response’] 등의 형태로 작성했다.</p>\n<p>기존에는 <code class=\"language-text\">index.adoc</code> 파일만 생성하고, 안에 모든 내용을 기재했다.\n그 당시에는 문제가 없었는데, 위와 같이 리팩토링 후에는 local IDE 에디터에서는 정상적인 html이 생성됐지만,\n실제 생성된 html은 <code class=\"language-text\">user.adoc</code>과 <code class=\"language-text\">bottle.adoc</code>을 참조하지 못했다.</p>\n<p>문제의 원인은</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\">tasks<span class=\"token punctuation\">.</span>asciidoctor <span class=\"token punctuation\">{</span>\n    inputs<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>snippetsDir<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">configurations</span><span class=\"token punctuation\">(</span>asciidoctorExt<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">dependsOn</span><span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">baseDirFollowsSourceFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 이녀석</span>\n    doFirst <span class=\"token punctuation\">{</span>\n        delete <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">file</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">\"src/main/resources/static/docs\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기에 있었다. 에러코드는 ~/bt/user.adoc이 존재하지 않는다라고 나왔다.</p>\n<p>index.adoc 파일은 ~/bt/src/docs에 존재했는데 path가 잘못 설정되고 있었다.\n기본 path가 위와 같이 인식된 이유는 Asciidoctor의 기본 path에 있다.</p>\n<ul>\n<li>기본적으로 Asciidoctor는 실행 디렉토리를 baseDir로 사용한다.</li>\n<li>Gradle은 프로젝트의 루트 디렉토리에서 실행된다.</li>\n<li>Asciidoctor 플러그인은 gradle의 실행 디렉토리를 Asciidoctor의 baseDir로 설정한다.</li>\n</ul>\n<p>때문에 local 환경에서는 ~/bt/src/docs 폴더 안에 <code class=\"language-text\">index.adoc</code>, <code class=\"language-text\">user.adoc</code>이 존재해서 문서가 잘 생성되어 보였다.</p>\n<p>그러나 빌드시에는 ~/bt 를 기본 디렉토리로 파일을 찾기 때문에 인식되지 않았던 것이다.</p>\n<p>해결 방법은 asciidoctor 플러그인의 <code class=\"language-text\">baseDirFollowsSourceFile()</code> 메서드이다.\n이를 사용하면 각 소스 파일의 디렉토리가 baseDir로 설정된다.</p>\n<p>때문에 <code class=\"language-text\">index.adoc</code>에서 <code class=\"language-text\">include::user.adoc[]</code>을 사용하면\n<code class=\"language-text\">index.adoc</code>의 경로인 ~/bt/src/docs/user.adoc을 참조하게 된다.</p>\n<p>기록을 위한 글이라고 두서없이 적었습니다..!</p>","frontmatter":{"date":"August 06, 2023","title":"Spring docs 적용 중 문제","categories":"Spring","author":"지구깜냥","emoji":"🌱"},"fields":{"slug":"/passion/bottle-letter/SpringDocs/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://ggam-nyang.github.io","comments":{"utterances":{"repo":"ggam-nyang/ggam-nyang.github.io"}}}}},"pageContext":{"slug":"/passion/bottle-letter/SpringSecurity-login/","nextSlug":"/passion/bottle-letter/SpringDocs/","prevSlug":""}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}