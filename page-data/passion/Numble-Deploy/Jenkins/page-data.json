{"componentChunkName":"component---src-templates-blog-template-js","path":"/passion/Numble-Deploy/Jenkins/","result":{"data":{"cur":{"id":"8c72ff7a-0b78-5d77-8650-51c879649e08","html":"<h2 id=\"jenkins\" style=\"position:relative;\"><a href=\"#jenkins\" aria-label=\"jenkins permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Jenkins</h2>\n<p>CI/CD를 위한 툴이다.</p>\n<p>로컬 docker에 띄워 사용해본 후, Github hook과 연결하기 위해 ec2에 Jenkins를 띄웠다.</p>\n<p><a href=\"https://www.jenkins.io/doc/book/installing/\">https://www.jenkins.io/doc/book/installing/</a>에 OS별 설치 방법이 상세히 나와있다.</p>\n<p>현재 이해한 내용은</p>\n<ul>\n<li>Jenkins를 8080 포트 (다른 포트도 가능)에 띄운다.</li>\n<li>localhost:8080를 통해 Jenkins 설정 페이지에 접근하여 설정할 수 있다.</li>\n<li>이런 설정은 cli로도 가능할 듯 싶고, 사이트 내에서 <code class=\"language-text\">PipeLine</code>, <code class=\"language-text\">Item</code>등을 만들 수 있다.</li>\n<li>Github repo의 <code class=\"language-text\">Jenkinsfile</code>을 실행하는 방식의 Pipeline을 만들면 해당 사이트에서 build하고 결과를 확인할 수 있다.</li>\n</ul>\n<p>구현 과정은 ansible 스크립트 작성 이후 해보자!</p>\n<p>결국 구현할 구조는</p>\n<p>push(Gihub action)\n-> Jenkins 서버에서 확인 후 build + deploy\n-> terraform 이용, web-server 구축 및 배포\n-> Ansible이 이 과정을 지원하는듯..?</p>\n<p>ec2를 생성하는 Terraform과 해당 ec2에 웹서버를 구축하고 배포하는 Anisble 스크립트를 통해\nCD를 구현하면 될 듯하다.</p>","excerpt":"Jenkins CI/CD를 위한 툴이다. 로컬 docker에 띄워 사용해본 후, Github hook과 연결하기 위해 ec2에 Jenkins를 띄웠다. https://www.jenkins.io/doc/book/installing/에 OS별 설치 방법이 상세히 나와있다. 현재 이해한 내용은 Jenkins를 8080 포트 (다른 포트도 가능)에 띄운다. localhost:8080를 통해 Jenkins 설정 페이지에 접근하여 설정할 수 있다. 이런 설정은 cli로도 가능할 듯 싶고, 사이트 내에서 , 등을 만들 수 있다. Github repo의 을 실행하는 방식의 Pipeline을 만들면 해당 사이트에서 build하고 결과를 확인할 수 있다. 구현 과정은 ansible 스크립트 작성 이후 해보자! 결국 구현할 구조는 push(Gihub action)\n-> Jenkins 서버에서 확인 후 build + deploy\n-> terraform 이용, web-server 구축 및 배포\n-> An…","frontmatter":{"date":"March 28, 2023","title":"Jenkins 설치","categories":"DevOps","author":"지구깜냥","emoji":"🔥"},"fields":{"slug":"/passion/Numble-Deploy/Jenkins/"}},"next":{"id":"74599883-6278-58d8-bf69-4dcbd085f50b","html":"<h3 id=\"kotlin-in-action\" style=\"position:relative;\"><a href=\"#kotlin-in-action\" aria-label=\"kotlin in action permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kotlin-in-Action</h3>\n<p>5장 람다로 프로그래밍\n람다는 다른 함수에 넘길 수 있는 작은 코드 조각</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> age<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">Person</code> 리스트의 age가 가장 높은 원소를 찾는다면</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">findTheOldest</span><span class=\"token punctuation\">(</span>people<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> maxAge <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">var</span> theOldest<span class=\"token operator\">:</span> Person<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>person <span class=\"token keyword\">in</span> people<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>age <span class=\"token operator\">></span> maxAge<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            maxAge <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span>age\n            theOldest <span class=\"token operator\">=</span> person\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">maxAge, theOldest</code> 두 변수가 필요하다.</p>\n<p>람다를 활용한다면 코드 길이가 줄어든다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">people<span class=\"token punctuation\">.</span><span class=\"token function\">maxBy</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span>age <span class=\"token punctuation\">}</span>\npeople<span class=\"token punctuation\">.</span><span class=\"token function\">maxBy</span><span class=\"token punctuation\">(</span>Person<span class=\"token operator\">::</span>age<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 멤버 참조 이용</span>\npeople<span class=\"token punctuation\">.</span><span class=\"token function\">maxBy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> p<span class=\"token operator\">:</span> Person <span class=\"token operator\">-></span> p<span class=\"token punctuation\">.</span>age <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 코틀린의 지원 없는 정석적인 표현</span></code></pre></div>\n<p>마지막 줄을 개선해보자. <br>\n함수의 마지막 인자가 람다 식이라면 중괄호로 뺄 수 있다. <br>\n<code class=\"language-text\">people.maxBy() { p:Person -> p.age }</code></p>\n<p>람다가 유일한 인자고 괄호로 뺐다면 빈 괄호를 없앨 수 있다.\n<code class=\"language-text\">people.maxBy { p:Person -> p.age }</code></p>\n<p>파라미터 타입을 명시하지 않고(컴파일러가 추론) 한개의 파라미터라면 더 코드를 줄인다.\n<br><code class=\"language-text\">people.maxBy { it.age }</code></p>\n<br>\n<p>자바 무명 클래스처럼 람다를 함수 안에서 정의하면 함수의 파라미터뿐 아니라 람다 정의 앞에 선언된 로컬 변수까지 람다에서 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">printMessagesWithPrefix</span><span class=\"token punctuation\">(</span>messages<span class=\"token operator\">:</span> Collection<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> prefix<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    messages<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">prefix</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">it</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>람다 내부에서 변수 접근이 가능하고, 변경도 가능하다.</p>\n<p>이런 변수를 람다가 포획한 변수라고 하는데, 어떤 함수가 로컬 변수를 포획한 람다를 반환 or 변수에 저장한다면 포획된 로컬 변수의 생명주기와 함수의 생명주기가 달라 질 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">tryToCountButtonClicks</span><span class=\"token punctuation\">(</span>button<span class=\"token operator\">:</span> Button<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Int <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> clicks <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    button<span class=\"token punctuation\">.</span><span class=\"token function\">onClick</span> <span class=\"token punctuation\">{</span> clicks<span class=\"token operator\">++</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> clicks\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 함수는 항상 0을 반환한다.<br>\nonclick 핸들러가 <code class=\"language-text\">tryToCOuntButtonClicks</code>가 <code class=\"language-text\">clicks</code>를 반환한 후에 호출되기 때문</p>\n<p>-> 무슨 의미일까?</p>\n<p>멤버 참조는 다음처럼 사용 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> p <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Dmitry\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> personsAgeFunction <span class=\"token operator\">=</span> Person<span class=\"token operator\">::</span>age\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">personsAgeFunction</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 바운드 멤버 참조</span>\n<span class=\"token keyword\">val</span> dmitrysAgeFunction <span class=\"token operator\">=</span> p<span class=\"token operator\">::</span>age\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">dmitrysAgeFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">filter</code>, <code class=\"language-text\">map</code>등의 컬렉션 함수들은 익숙하기 때문에 기록에는 남기지 않겠다!</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// 중간 Collection이 생겨 비효율</span>\npeople<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&lt;=</span> <span class=\"token number\">27</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 효율</span>\npeople<span class=\"token punctuation\">.</span><span class=\"token function\">count</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&lt;=</span> <span class=\"token number\">27</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"sequence\" style=\"position:relative;\"><a href=\"#sequence\" aria-label=\"sequence permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sequence</h4>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// Collection이 2개 만들어진다. map, filter가 반환하므로.</span>\npeople<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>Person<span class=\"token operator\">::</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"A\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Sequence를 이용해 중간 연산 부산물(?)을 없앤다.</span>\npeople<span class=\"token punctuation\">.</span><span class=\"token function\">asSequence</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>Person<span class=\"token operator\">::</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"A\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이는 lazy하게 연산을 수행하기 때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">asSequence</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"map(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">it</span></span><span class=\"token string\">)\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">*</span> it<span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"filter(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">it</span></span><span class=\"token string\">)\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드는 아무것도 출력하지 않는다.\n<code class=\"language-text\">toList()</code> 와 같은 최종연산이 호출될 때 비로소 모든 중간연산이 적용된다.</p>\n<p>출력의 결과는 <code class=\"language-text\">map(1) filter(1) map(2) filter(4) map(3) filter(9) . . .</code> 이다.</p>\n<p>큰 컬렉션에 대해서는 Sequence 변환 연산을 꼭!</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// 이렇게 응용할 수 있다.</span>\n<span class=\"token keyword\">fun</span> File<span class=\"token punctuation\">.</span><span class=\"token function\">isInsideHiddenDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n    <span class=\"token function\">generateSequence</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span>parentFile <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">any</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span>isHidden <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">val</span> file <span class=\"token operator\">=</span> <span class=\"token function\">File</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"/Users/svtk/.HiddenDir/a.txt\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">isInsideHiddenDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token operator\">></span> <span class=\"token boolean\">true</span></code></pre></div>\n<p>SAM 인터페이스 한줄 정리\n: Java에서 익명 객체로 만들던 것을 Kotlin은 람다로 사용 가능 하고,\n컴파일러가 익명 클래스를 생성해준다.  <br>\n또한, 포획된 변수가 없다면 object로 생성하여 1개의 인스턴스만 유지한다.\n추후 <code class=\"language-text\">inline</code>함수에서 확인하자.</p>\n<h3 id=\"수신-객체-지정-람다-with--apply\" style=\"position:relative;\"><a href=\"#%EC%88%98%EC%8B%A0-%EA%B0%9D%EC%B2%B4-%EC%A7%80%EC%A0%95-%EB%9E%8C%EB%8B%A4-with--apply\" aria-label=\"수신 객체 지정 람다 with  apply permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>수신 객체 지정 람다: with &#x26;&#x26; apply</h3>\n<p>with 활용을 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">alphabet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> result <span class=\"token operator\">=</span> <span class=\"token function\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>letter <span class=\"token keyword\">in</span> <span class=\"token char\">'A'</span><span class=\"token operator\">..</span><span class=\"token char\">'Z'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"\\nNow I know the alphabet!\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token operator\">></span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">alphabet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ABCDEFGHIJKLMNOPQRSTUVWXYZ</span>\n<span class=\"token comment\">// Now I know the alphabet!</span></code></pre></div>\n<p><code class=\"language-text\">with</code>을 사용하면 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">alphabet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> stringBuilder <span class=\"token operator\">=</span> <span class=\"token function\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">with</span><span class=\"token punctuation\">(</span>stringBuilder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>letter <span class=\"token keyword\">in</span> <span class=\"token char\">'A'</span><span class=\"token operator\">..</span><span class=\"token char\">'Z'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"\\nNow I know the alphabet!\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token operator\">></span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">alphabet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// this를 모두 없앨 수 있고 코드가 더 단축된다.</span></code></pre></div>\n<p><code class=\"language-text\">with(stringBuilder, {람다})</code>와 같은 함수이다. 함수지만 람다를 밖으로 빼서 특별한 구문처럼 보인다.</p>\n<p>첫번째 인자는 두번째 인자인 람다의 수신 객체가 된다.\n<code class=\"language-text\">with</code>은 마지막 식의 값을 반환한다.</p>\n<p>람다의 결과 대신 수신 색체가 필요한 경우엔 <code class=\"language-text\">apply</code></p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">alphabet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>letter <span class=\"token keyword\">in</span> <span class=\"token char\">'A'</span><span class=\"token operator\">..</span><span class=\"token char\">'Z'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"\\nNow I know the alphabet!\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token operator\">></span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">alphabet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>apply의 결과는 <code class=\"language-text\">StringBuilder</code>이다. 즉, 수신 객체가 전달받은 람다의 수신 객체가 된다.</p>\n<p>이는 객체의 인스턴스를 만들면서 즉시 프로퍼티 중 일부를 초기화 하는 경우 유용하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">createViewWithCustomAttributes</span><span class=\"token punctuation\">(</span>context<span class=\"token operator\">:</span> Context<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n    <span class=\"token function\">TextView</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span> <span class=\"token punctuation\">{</span>\n        text <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"sample Text\"</span></span>\n        textSize <span class=\"token operator\">=</span> <span class=\"token number\">20.0</span>\n        <span class=\"token function\">setPadding</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>처럼 말이다. 람다를 실행하면 초기화된 TextView를 반환한다.</p>\n<p>마지막으로 with과 apply를 응용한 우아한 함수로 마무리하겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">alphabet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> buildString <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>letter <span class=\"token keyword\">in</span> <span class=\"token char\">'A'</span> <span class=\"token operator\">..</span> <span class=\"token char\">'Z'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"\\nNOw I Know the alphabet!\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"date":"March 25, 2023","title":"Kotlin-in-Action 5장","categories":"Kotlin","author":"지구깜냥","emoji":"🌱"},"fields":{"slug":"/passion/Kotlin-In-Action/5장 끄적이기/"}},"prev":{"id":"e5242703-d0c6-50d8-befa-51ddeb5be989","html":"<h2 id=\"terraform\" style=\"position:relative;\"><a href=\"#terraform\" aria-label=\"terraform permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Terraform</h2>\n<p><a href=\"https://developer.hashicorp.com/terraform/intro\">테라폼 공식문서</a>\n<br></p>\n<h3 id=\"테라폼\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EB%9D%BC%ED%8F%BC\" aria-label=\"테라폼 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테라폼?</h3>\n<p>클라우드 리소스 + on-prem 리소스를 <strong>코드</strong>로 관리할 수 있는 도구.\n컴퓨팅, 스토리지, 네트워크 같은 low-level 뿐 아니라 DNS, SaaS 까지도 관리할 수 있다.</p>\n<h3 id=\"어떻게\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%96%BB%EA%B2%8C\" aria-label=\"어떻게 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어떻게?</h3>\n<p>Terraform은 API를 통해 클라우드 플랫폼 및 기타 서비스에서 리소스를 생성하고 관리한다.\n사실상 거의 모든 플랫폼과 함께 동작할 수 있다.</p>\n<p>이미 Terraform에서는 다양한 유형의 리소스, 서비스를 관리하기 위해 providers가 작성되어 있고\nAWS, Azure, Kubernetes, Github 등등 지원한다.</p>\n<ul>\n<li>Write\n<ul>\n<li>여러 클라우드 공급자 및 서비스에 걸쳐 있을 수 있는 리소스를 정의한다.</li>\n</ul>\n예를 들어 보안 그룹과 로드 밸런서가 있는 VPC(Virtual Private Cloud) 네트워크의 가상 시스템에 애플리케이션을 배포하는 구성을 생성할 수 있다.</li>\n<li>Plan\n<ul>\n<li>기존 인프라 기반으로 생성, 업데이트 또는 삭제할 인프라에 관한 계획(스크립트?) 작성.</li>\n</ul>\n</li>\n<li>Apply\n<ul>\n<li>승인을 받고, 리소스 종속성을 고려하여 순서대로 실행.</li>\n<li>예를 들어 VPC의 속성을 업데이트하고 해당 VPC의 가상 시스템 수를 변경하면 Terraform이 가상 시스템을 확장하기 전에 VPC를 다시 생성.</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"https://cloudbim.tistory.com/14\">https://cloudbim.tistory.com/14</a>\n해당 블로그를 참고해서 진행했다.</p>\n<p>.tf 파일을 생성하여 terraform을 통해 vpc, subnet, igw, rt 그리고 ec2까지 자동 생성했다.\n이후 <code class=\"language-text\">terraform destroy</code>로 한번에 해당 리소스를 삭제할 수 있다.</p>\n<br>\n이제 Ansible을 공부해서 더 적용해보자!","frontmatter":{"date":"March 28, 2023","title":"테라폼이란?","categories":"DevOps","author":"지구깜냥","emoji":"🔥"},"fields":{"slug":"/passion/Numble-Deploy/Terraform/"}},"site":{"siteMetadata":{"siteUrl":"https://ggam-nyang.github.io","comments":{"utterances":{"repo":"ggam-nyang/ggam-nyang.github.io"}}}}},"pageContext":{"slug":"/passion/Numble-Deploy/Jenkins/","nextSlug":"/passion/Kotlin-In-Action/5장 끄적이기/","prevSlug":"/passion/Numble-Deploy/Terraform/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}