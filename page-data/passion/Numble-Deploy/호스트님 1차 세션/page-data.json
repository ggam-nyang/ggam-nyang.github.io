{"componentChunkName":"component---src-templates-blog-template-js","path":"/passion/Numble-Deploy/호스트님 1차 세션/","result":{"data":{"cur":{"id":"35697a62-53f3-5eac-b473-210c520b36fe","html":"<h2 id=\"ci\" style=\"position:relative;\"><a href=\"#ci\" aria-label=\"ci permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CI</h2>\n<p>보통 개인 branch -> main merge 되면서 Build/Test 하고 Artifact Repo를 통해 필요한 걸 받아오고..?</p>\n<br>\n우리는 간단하게\n<p>젠킨스가 하는 일:\n깃허브에서 코드가 main branch에 올라가면, hook으로 어딘가로 알려줄 수 있음\n그걸 Jenkins에 쏘고 해당 레포를 clone 한다던지 할 수 있음.</p>\n<p>Jenkins pipeline으로 만들고 Github url 입력.</p>\n<p>pipeline SCM - github repo JENKINSFILE을 읽고 동작함.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">docker</span> pull jenkins/jenkins:lts-jdk11\n<span class=\"token function\">docker</span> run <span class=\"token parameter variable\">--name</span> jenkins <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8080</span>:8080 <span class=\"token parameter variable\">-v</span> jenkins:/var/jenkins_home jenkins/jenkins:lts-jdk11</code></pre></div>\n<h3 id=\"terraform\" style=\"position:relative;\"><a href=\"#terraform\" aria-label=\"terraform permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Terraform</h3>\n<p>ec2 1개 Jenkins, 1개 Web Server.\nPrivate key, Public key를 어디서 어디 것을 알아야 할지.</p>\n<p>aws key 저장소에 private key를 미리 저장.\nA에서 private 다운, B에선 public을 등록해서?</p>\n<p>Ec2를 띄우는건 Terraform으로 가능하지만\n그 안에 구성을 만드는건 Ansible을 사용해야함.</p>\n<h3 id=\"deploy\" style=\"position:relative;\"><a href=\"#deploy\" aria-label=\"deploy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Deploy</h3>\n<p>Shell script, Python, Jenkins, Ansible 등으로 할 수 있음.</p>\n<p>Deploy용 Ansible을 작성.</p>\n<p>두서 없이 받아적었는데, 정리해보자면\nTerraform: Ec2 등 클라우드 리소스 생성\nJenkins: 빌드 및 배포 자동화 (main branch push를 감지)\nAnsible: Terraform으로 구축한 리소스(서버) 환경 구성</p>\n<p>예를 들어, terraform으로 aws 구축 -> Jenkins 서버에서 빌드 -> Ansible 스크립트를 다른 ec2에서 실행하도록</p>\n<p>이런 느낌으로 받아들였다. 좀 더 진행을 해보며 구체화 해보자!</p>","excerpt":"CI 보통 개인 branch -> main merge 되면서 Build/Test 하고 Artifact Repo를 통해 필요한 걸 받아오고..? 젠킨스가 하는 일:\n깃허브에서 코드가 main branch에 올라가면, hook으로 어딘가로 알려줄 수 있음\n그걸 Jenkins에 쏘고 해당 레포를 clone 한다던지 할 수 있음. Jenkins pipeline으로 만들고 Github url 입력. pipeline SCM - github repo JENKINSFILE을 읽고 동작함. Terraform ec2 1개 Jenkins, 1개 Web Server.\nPrivate key, Public key를 어디서 어디 것을 알아야 할지. aws key 저장소에 private key를 미리 저장.\nA에서 private 다운, B에선 public을 등록해서? Ec2를 띄우는건 Terraform으로 가능하지만\n그 안에 구성을 만드는건 Ansible을 사용해야함. Deploy Shell script, P…","frontmatter":{"date":"March 31, 2023","title":"1차 세션","categories":"DevOps","author":"지구깜냥","emoji":"🔥"},"fields":{"slug":"/passion/Numble-Deploy/호스트님 1차 세션/"}},"next":{"id":"c3418f11-70ed-54d9-b826-c3b3a13cb0b0","html":"<h2 id=\"sealed-class\" style=\"position:relative;\"><a href=\"#sealed-class\" aria-label=\"sealed class permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sealed Class</h2>\n<blockquote>\n<p><a href=\"https://kotlinlang.org/docs/sealed-classes.html\">코틀린 sealed class 공식문서</a>를 참고했습니다.</p>\n</blockquote>\n<h3 id=\"목적\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%EC%A0%81\" aria-label=\"목적 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>목적</h3>\n<p>클래스의 상속을 더 제어하기 위해 사용한다.</p>\n<p>코틀린은 예약어를 통해 컴파일 과정에서 편의성을 제공하는 방식을 좋아하는 듯 하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">interface</span> Expr\n<span class=\"token keyword\">class</span> <span class=\"token function\">Num</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> value<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Expr\n<span class=\"token keyword\">class</span> <span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> left<span class=\"token operator\">:</span> Expr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> right<span class=\"token operator\">:</span> Expr<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Expr\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> Expr<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">is</span> Num <span class=\"token operator\">-></span> e<span class=\"token punctuation\">.</span>value\n        <span class=\"token keyword\">is</span> Sum <span class=\"token operator\">-></span> <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span> <span class=\"token operator\">-></span>\n            <span class=\"token keyword\">throw</span> <span class=\"token function\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Unknown expression\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 구조에서, when 식의 else를 주목하자.</p>\n<p><code class=\"language-text\">Expr</code>를 구현한 새로운 Class가 생긴다면, else문은 논리 오류가 될 수 있다.\n즉, 하위 클래스가 추가 됐을 때 컴파일러가 when이 모든 분기를 처리하는지 알 수 없다.\n또 새로운 클래스 처리를 잊어버려도 알 수 없다.</p>\n<p>이 <strong>문제</strong>에 대한 해법이 <code class=\"language-text\">sealed class</code>이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> Expr <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">class</span> <span class=\"token function\">Num</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> value<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Expr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">class</span> <span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> left<span class=\"token operator\">:</span> Expr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> right<span class=\"token operator\">:</span> Expr<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Expr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> Expr<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">is</span> Num <span class=\"token operator\">-></span> e<span class=\"token punctuation\">.</span>value\n        <span class=\"token keyword\">is</span> Sum <span class=\"token operator\">-></span> <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">sealed class</code>를 상속하는 하위 클래스는 <del>무조건 중첩 클래스로 구현되어야 한다.</del>\nwhen식이 모든 하위 타입을 검사하는지 컴파일러는 알 수 있고, 새로운 클래스가 분기처리 되지 않으면 컴파일 오류가 난다.</p>\n<p><code class=\"language-text\">sealed class</code>는 그 자체로 abstract 하고, 인스턴스화 할 수 없다.</p>\n<p>코틀린 1.5부터는 너무 많은 제약을 해소했다.</p>\n<p>하위 클래스는 중첩 클래스가 아닌 <code class=\"language-text\">sealed class</code>가 정의된 패키지 안에서 구현할 수 있고,\n<code class=\"language-text\">sealed interface</code>도 추가됐다.</p>\n<p>기존에 <code class=\"language-text\">sealed interface</code>가 없던 이유는 자바에서 해당 인터페이스를 확장하지 못하게 할 방법이 없기 때문이라고 했는데,\n이 문제가 어떻게 해결된 것인지 모르겠다.</p>","frontmatter":{"date":"March 31, 2023","title":"Sealed Class","categories":"Kotlin","author":"지구깜냥","emoji":"🌱"},"fields":{"slug":"/passion/Kotlin-In-Action/Sealed class/"}},"prev":{"id":"a2788ceb-3885-58b0-9b0c-04abbd1a87ba","html":"<h2 id=\"결과물\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EA%B3%BC%EB%AC%BC\" aria-label=\"결과물 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결과물</h2>\n<p>배포 쪽은 처음 공부하다보니, 작업량 산정이 안됐다.</p>\n<p>결과적으로, 50%도.. 완성 못한 느낌으로 제출할 수 밖에 없게 됐다 ㅠ</p>\n<p>호스트님이 의도한 구조는<br></p>\n<ol>\n<li>Terraform으로 클라우드 리소스 생성 및 관리(2개의 ec2 생성)</li>\n<li>Github push 시, Jenkins 서버에서 Checkout -> build -> deploy 과정을 거침</li>\n<li>deploy 단계는 Ansible을 이용해 Web 서버에 배포</li>\n</ol>\n<p>로 이해했다.</p>\n<p>이걸 의도하신게 아닐 수도 있지만..! 내가 이해한 부분은 이렇다.</p>\n<p>나는 Spring server를 배포해보려 했고\n내가 시도한 부분을 위와 대조해 정리해보면</p>\n<ul>\n<li>Terraform -> VPC 기본 세팅과 2개의 ec2 생성</li>\n<li>Jenkins-ec2에 수동으로 Jenkins 설치 및 설정 후 <br></li>\n</ul>\n<p>Github web hook을 통해 build 성공 <br>\n-> 이 과정에서 gradle build 시에는 ec2가 고장이 남.. docker에서 충분히 연습 후에 해야 했는데, 제출날이라 마음이 급했다.</p>\n<ul>\n<li>deploy 단계는 Ansible script를 작성하고 Jenkins pipeline에 추가했지만, build 단계의 오류로 실행은 해보지 못함. <br></li>\n</ul>\n<p>제출 후 다시 천천히 테스트 해보며 구축할 예정!</p>\n<h3 id=\"좋았던-점\" style=\"position:relative;\"><a href=\"#%EC%A2%8B%EC%95%98%EB%8D%98-%EC%A0%90\" aria-label=\"좋았던 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>좋았던 점</h3>\n<p>좋았던 점은 전반적인 인프라 구조를 배웠다.</p>\n<p>착각일 수도 있지만, 남은 과정은 찾아보면서 해결할 수 있을 것 같고..?</p>\n<p>전체적인 인프라 구조를 공부할 수 있었다. 보안을 위한 Key 설정 등을 다루지 못해서 아쉽지만\n못한 부분은 다음주에 해볼 생각이다.</p>\n<p>Terraform, Ansible 등을 깊이 있게 다루지는 못했지만, 배포 자동화를 살짝 엿볼 수 있었다.</p>\n<p>제일 좋았던 점은 docker와 많이 친해졌다.<br>\n이번 딥다이브에서 그나마 친했던게 docker였지만, 제대로 다룰줄 몰랐는데\ndocker 컨테이너를 띄워서 ubuntu 환경에서 테스트를 진행해보며 많이 배울 수 있었다.</p>\n<h3 id=\"아쉬운-점\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%89%AC%EC%9A%B4-%EC%A0%90\" aria-label=\"아쉬운 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아쉬운 점</h3>\n<ol>\n<li>시간 투자를 많이 못했다.<br></li>\n</ol>\n<p>우선순위에 밀리다보니 원하는 만큼 공부하지 못해 아쉽다. 기한은 지났지만 꾸준히 공부해볼 생각이다.</p>\n<ol start=\"2\">\n<li>검색 &#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C; Try <br></li>\n</ol>\n<p>인프라도 결국 docker 환경에서라도 script를 작성해보며 시도하는게 빨리 배운다. <br>\n문서를 찾아보는 것도 좋지만, 실행하고 부딪히는게 이해하기도 좋고 막힌 진도를 뚫는데 큰 도움이 됐다.</p>\n<p>회고록조차 시간에 쫓겨 아쉬움이 많이 남는다..\n제출일 11시 55분이지만!! 같이 신청한 조원들과 마무리까지 달려봐야겠다!!</p>\n<p><code class=\"language-text\">다듬어진 회고록과 공부 기록으로 돌아올 예정!!</code></p>","frontmatter":{"date":"April 09, 2023","title":"Numble 배포 자동화 딥다이브 회고록","categories":"DevOps Numble","author":"지구깜냥","emoji":"🔥"},"fields":{"slug":"/passion/Numble-Deploy/Numble_Deploy_DeepDive/"}},"site":{"siteMetadata":{"siteUrl":"https://ggam-nyang.github.io","comments":{"utterances":{"repo":"ggam-nyang/ggam-nyang.github.io"}}}}},"pageContext":{"slug":"/passion/Numble-Deploy/호스트님 1차 세션/","nextSlug":"/passion/Kotlin-In-Action/Sealed class/","prevSlug":"/passion/Numble-Deploy/Numble_Deploy_DeepDive/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}